<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>类加载</title>
      <link href="/blog/2022/10/17/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
      <url>/blog/2022/10/17/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><blockquote><p>Java程序在计算机中的三个阶段</p></blockquote><p><img src="/blog/img/md/JVM/bclassLoder01.png"></p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><blockquote><p>类加载的五个阶段<br><img src="/blog/img/md/JVM/bclassLoder02.png"></p></blockquote><ol><li><p>加载阶段</p><blockquote><p>JVM从不同的数据源加载的字节码文件转化为二进制字节流加载到内存中，并生成一个代表该类的Class对象</p></blockquote></li><li><p>连接阶段</p></li></ol><ul><li><p>验证</p><blockquote><p>目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，且不会危害虚拟机自身的安全。</p></blockquote></li><li><p>准备</p><blockquote><p>JVM在该阶段对静态变量，分配内存并默认初始化，这些变量的内存都在方法区进行分配。</p></blockquote></li><li><p>解析</p><blockquote><p>虚拟机将常量池内的符号引用替换为直接引用的过程。（类似于逻辑关系转换为物理关系的过程）</p></blockquote></li></ul><ol start="3"><li>初始化<blockquote><p>收集所有静态变量和静态代码块中的语句，合并后进行赋值。</p></blockquote></li></ol><h2 id="什么是类加载器"><a href="#什么是类加载器" class="headerlink" title="什么是类加载器"></a>什么是类加载器</h2><blockquote><p>在类加载阶段，类加载器会将字节码文件转化为二进制字节流加载到内存中</p></blockquote><h2 id="为什么有那么多类加载器"><a href="#为什么有那么多类加载器" class="headerlink" title="为什么有那么多类加载器"></a>为什么有那么多类加载器</h2><ol><li>需要从多种来源读取字节流，例如网络、文件系统等</li><li>相同包下的两个类A（methodA()包访问）、B（methodB()包访问），只有都有同一个类加载器加载时A才有对B的package访问权限。<br>如果两个类的类加载器不同，A类就无法访问B类的methodB方法，即使它们在同一个包下<h2 id="什么时候需要自定义类加载器"><a href="#什么时候需要自定义类加载器" class="headerlink" title="什么时候需要自定义类加载器"></a>什么时候需要自定义类加载器</h2></li><li>如果需要将编译后的代码用某种算法加密，可以自己实现类加载器，负责将这段代码加密后还原</li><li>需要自定义类的来源</li></ol><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><blockquote><p>当一个类需要被加载的时候，需要先把请求交给父类加载器，当父类加载器无法加载的时候，子类加载器才会去尝试加载。</p></blockquote><p><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/01.png" alt="图1"></p><h3 id="为什么有双亲委派模型"><a href="#为什么有双亲委派模型" class="headerlink" title="为什么有双亲委派模型"></a>为什么有双亲委派模型</h3><blockquote><p>为了确保类只会被加载一次，如果我直接重写了Object类，没有双亲委派的话，就直接生效了。<br>有了双亲委派，这个类先被Bootstrap类加载器加载后，自己重写的类将不会生效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射机制</title>
      <link href="/blog/2022/10/17/Java/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2022/10/17/Java/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h1><p>在java运行期间，通过反射api可以获取到任何类的内部信息（包括成员变量，构造器，成员方法等等），并可以操作对象的属性和方法。</p><h1 id="反射的原理"><a href="#反射的原理" class="headerlink" title="反射的原理"></a>反射的原理</h1><p>Java程序在计算机中有三个阶段:编译，加载，运行。当一个对象被实例化的时候，会加载一个Class类对象（仅会被加载一次）和当前对象。<br>这个Class类对象包含了完整的Class结构信息。</p><h1 id="什么时候需要反射"><a href="#什么时候需要反射" class="headerlink" title="什么时候需要反射"></a>什么时候需要反射</h1><ol><li>在Java运行时，假如有个A类，有methodA和methodB方法，如果我们要在不改变源码，从执行A方法改变为执行B方法，传统方式下无法完成，<br>通过反射，我们可以将A类的信息写在配置文件当中，如果需要从执行A方法修改为执行B方法，只需要修改配置文件，无需修改源码。</li><li>日志信息如果直接写在业务代码里，代码会显得很臃肿，我们可以通过反射获取这个类的代理对象，在代理方法前后写日志信息，这样就不会破坏源码结构</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码优化</title>
      <link href="/blog/2022/10/16/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%92%8C%E9%87%8D%E6%9E%84/EffectiveJava/"/>
      <url>/blog/2022/10/16/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%92%8C%E9%87%8D%E6%9E%84/EffectiveJava/</url>
      
        <content type="html"><![CDATA[<h1 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h1><h3 id="1-遇到多个构造器参数时要考虑使用构造器"><a href="#1-遇到多个构造器参数时要考虑使用构造器" class="headerlink" title="1.遇到多个构造器参数时要考虑使用构造器"></a>1.遇到多个构造器参数时要考虑使用构造器</h3><blockquote><p>当你想要创建实例的时候，就利用参数列表最短的构造器，但该列表中包含了要设置的所有参数，通常需要许多你本不想设置的参数，但还是不得不为它们传递值。<br>简而言之，当有许多参数的时候，客户端代码会很难编写，并且仍然较难以阅读。</p></blockquote><p>使用建造者模式，让客户端利用所有必要的参数调用构造器得到一个builder对象。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class NutritionFacts &#123;</span><br><span class="line">    private final int servingSize;</span><br><span class="line">    private final int calories;</span><br><span class="line">    private final int fat;</span><br><span class="line"></span><br><span class="line">    private NutritionFacts(Builder builder) &#123;</span><br><span class="line">        this.servingSize = builder.servingSize;</span><br><span class="line">        this.calories = builder.calories;</span><br><span class="line">        this.fat = builder.fat;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class Builder &#123;</span><br><span class="line">        //Required parameters</span><br><span class="line">        private final int servingSize;</span><br><span class="line"></span><br><span class="line">        //Optional parameters</span><br><span class="line">        private int calories = 0;</span><br><span class="line">        private int fat = 0;</span><br><span class="line"></span><br><span class="line">        public Builder(int servingSize) &#123;</span><br><span class="line">            this.servingSize = servingSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder calories(int val) &#123;</span><br><span class="line">            this.calories = val;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public Builder fat(int val) &#123;</span><br><span class="line">            this.fat = val;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">        public NutritionFacts builder() &#123;</span><br><span class="line">            return new NutritionFacts(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>lombok可以使用@Builder注解</p></blockquote><h3 id="2-避免创建不必要的对象"><a href="#2-避免创建不必要的对象" class="headerlink" title="2.避免创建不必要的对象"></a>2.避免创建不必要的对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//极端的例子（该语句每次执行都会创建一个新的String实例，如果在一个循环中，就会创建出成千上万不必要的String实例）</span><br><span class="line">String s = new String(&quot;bikini&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//有些对象创建的成本比其他对象要高很多，如果重复地需要这类对象，建议将它缓存下来重用。</span><br><span class="line">static boolean isRomanNumeral(String s) &#123;</span><br><span class="line">    return s.matches(&quot;^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)&quot;</span><br><span class="line">                + &quot;(x[CL]|L?X&#123;0,3&#125;(I[XV]|V?I&#123;0,3&#125;)$)&quot;);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//为了提升性能，应该显式地将正则表达式编译成一个Pattern实例，并缓存下来</span><br><span class="line">private static final Pattern ROMAN = Pattern.compile(&quot;^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)&quot;</span><br><span class="line">        + &quot;(x[CL]|L?X&#123;0,3&#125;(I[XV]|V?I&#123;0,3&#125;)$)&quot;);</span><br><span class="line"></span><br><span class="line">static boolean isRomanNumeral(String s) &#123;</span><br><span class="line">    return ROMAN.matcher(s).matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-要优先使用基本类型而不是包装基本类型，要当心无意识的自动装箱"><a href="#3-要优先使用基本类型而不是包装基本类型，要当心无意识的自动装箱" class="headerlink" title="3.要优先使用基本类型而不是包装基本类型，要当心无意识的自动装箱"></a>3.要优先使用基本类型而不是包装基本类型，要当心无意识的自动装箱</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//自动装箱使得基本类型和装箱基本类型之间的差别变得模糊起来，但是并没有完全消除</span><br><span class="line">private static long sum() &#123;</span><br><span class="line">    Long sum = 0L;</span><br><span class="line">    for (int i = 0; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">//这段代码的答案是正确的，但是比实际情况更慢一些，只因打错了一个字符。变量sum被声明成Long而不是long。</span><br><span class="line">//将sum的声明从Long改为long，在我的机器上使运行时间从6.3秒减少到了0.59秒</span><br></pre></td></tr></table></figure><h3 id="4-try-with-resources优先于try-finally"><a href="#4-try-with-resources优先于try-finally" class="headerlink" title="4.try-with-resources优先于try-finally"></a>4.try-with-resources优先于try-finally</h3><blockquote><p>在处理必须关闭的资源时，始终要优先考虑用try-with-resources，而不是用try-finally</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//根据经验，try-finally语句是确保资源会被适时关闭的最佳方法，就算发生异常或者返回也一样</span><br><span class="line">static String firstLineOfFile(String path) throws IOException &#123;</span><br><span class="line">    BufferedReader br = new BufferedReader(new FileReader(path));</span><br><span class="line">    try &#123;</span><br><span class="line">        return br.readLine();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//这样看起来好像不算太坏，但是如果再添加第二个资源，就会一团糟了</span><br><span class="line">static void copy(String src, String dst) throws IOException &#123;</span><br><span class="line">    InputStream in = new FileInputStream(src);</span><br><span class="line">    try &#123;</span><br><span class="line">        OutputStream out = new FileOutputStream(dst);</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] buf = new byte[BUFFER_SIZE];</span><br><span class="line">            int n;</span><br><span class="line">            while ((n = in.read(buf)) &gt;= 0) &#123;</span><br><span class="line">                out.write(buf, 0, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//即使用try-finally语句正确地关闭了资源，它也存在着些许不足。因为在try块和finally块中的代码，都会抛出异常</span><br><span class="line"></span><br><span class="line">//以下是使用try-with-resources的范例：</span><br><span class="line">try (BufferedReader br = new BufferedReader(new FileReader(path))) &#123;</span><br><span class="line">    return br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void copy(String src, String dst) throws IOException &#123;</span><br><span class="line">    try (InputStream in = new FileInputStream(src);</span><br><span class="line">         OutputStream out = new FileOutputStream(dst)) &#123;</span><br><span class="line">        byte[] buf = new byte[BUFFER_SIZE];</span><br><span class="line">        int n;</span><br><span class="line">        while ((n = in.read(buf)) &gt;= 0) &#123;</span><br><span class="line">            out.write(buf, 0, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-使类和成员的可访问性最小化"><a href="#5-使类和成员的可访问性最小化" class="headerlink" title="5. 使类和成员的可访问性最小化"></a>5. 使类和成员的可访问性最小化</h3><blockquote><p>尽可能地使每个类或者成员不被外界访问</p></blockquote><h3 id="6-请不要使用原生态类型"><a href="#6-请不要使用原生态类型" class="headerlink" title="6.请不要使用原生态类型"></a>6.请不要使用原生态类型</h3><blockquote><p>出错应该尽快发现，最好是在编译时就发现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//如果现在使用这条声明，并且不小心将一个coin放进了stamp集合中，这一错误的插入照样得以编译和运行，不会出错</span><br><span class="line">private final Collection stamps = ...;</span><br><span class="line">...</span><br><span class="line">stamps.add(new Coin());</span><br><span class="line"></span><br><span class="line">//直到从stamp集合中获取coin时才会收到一条错误提示</span><br><span class="line">for (Iterator i = stamps.iterator(); i.hasNext();) &#123;</span><br><span class="line">    Stamp stamp = (Stamp) i.next(); // Throws ClassCastException</span><br><span class="line">    stamp.cancel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用泛型后，编译器直到stamps只包含stamp实例，错误会在编译时产生</span><br><span class="line">private final Collection&lt;stamp&gt; stamps = ...;</span><br></pre></td></tr></table></figure><h3 id="7-用enum代替int常量"><a href="#7-用enum代替int常量" class="headerlink" title="7.用enum代替int常量"></a>7.用enum代替int常量</h3>]]></content>
      
      
      <categories>
          
          <category> 重构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alibaba 开源的 Java 诊断工具 Arthas</title>
      <link href="/blog/2022/10/16/JVM/Arthas/"/>
      <url>/blog/2022/10/16/JVM/Arthas/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。</p></blockquote><h1 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h1><blockquote><p><a href="https://arthas.aliyun.com/">https://arthas.aliyun.com</a></p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p>curl -O <a href="https://arthas.aliyun.com/arthas-boot.jar">https://arthas.aliyun.com/arthas-boot.jar</a><br>windows下载 <a href="https://github.com/alibaba/arthas/releases">https://github.com/alibaba/arthas/releases</a></p></blockquote><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><blockquote><p>java -jar arthas-boot.jar</p></blockquote><h1 id="Arthas-Tunnel（远程连接使用）"><a href="#Arthas-Tunnel（远程连接使用）" class="headerlink" title="Arthas Tunnel（远程连接使用）"></a>Arthas Tunnel（远程连接使用）</h1><blockquote><p>通过 Arthas Tunnel Server/Client 来远程管理/连接多个 Agent<br>统一授权登录服务器，对服务器可以通过agentId直接使用arthas诊断</p></blockquote><h2 id="统一的服务端"><a href="#统一的服务端" class="headerlink" title="统一的服务端"></a>统一的服务端</h2><ol><li>下载tunnel server<blockquote><p><a href="https://github.com/alibaba/arthas/releases">https://github.com/alibaba/arthas/releases</a></p></blockquote></li><li>启动服务<blockquote><p>java -jar  arthas-tunnel-server.jar</p></blockquote></li></ol><p>默认情况下，arthas tunnel server 的 web 端口是8080，arthas agent 连接的端口是7777。</p><p>启动之后，可以访问 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a> ，再通过agentId连接到已注册的 arthas agent 上。</p><p>通过 Spring Boot 的 Endpoint，可以查看到具体的连接信息： <a href="http://127.0.0.1:8080/actuator/arthas">http://127.0.0.1:8080/actuator/arthas</a> ，登陆用户名是arthas，密码在 arthas tunnel server 的日志里可以找到，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">32851 [main] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration</span><br><span class="line"></span><br><span class="line">Using generated security password: f1dca050-3777-48f4-a577-6367e55a78a2</span><br></pre></td></tr></table></figure><h2 id="目标机器"><a href="#目标机器" class="headerlink" title="目标机器"></a>目标机器</h2><blockquote><p>如果要用server去连接目标IP使用arthas的话,服务端必须启动的,否则这个AgentId是出不来的,因为要注册成功后才会出现这个ID</p></blockquote><ol><li>启动arthas<blockquote><p>java -jar arthas-boot.jar –tunnel-server ‘ws://192.168.117.128:7777/ws’ –target-ip 192.168.117.130</p></blockquote></li></ol><p>如果连接成功会在日志中输出id，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wiki       https://arthas.aliyun.com/doc                                        </span><br><span class="line">tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  </span><br><span class="line">version    3.6.6                                                                </span><br><span class="line">main_class                                                                      </span><br><span class="line">pid        2020                                                                 </span><br><span class="line">time       2022-10-16 08:55:37                                                  </span><br><span class="line">id         BZNJK8O6YFVX3VTOEJBL</span><br></pre></td></tr></table></figure><p>还可以用session命令来显示AgentId，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Name              Value                                                                                                                                                                                                                                                   </span><br><span class="line">--------------------------------------------------------                                                                                                                                                                                                                   </span><br><span class="line"> JAVA_PID          2020                                                                                                                                                                                                                                                    </span><br><span class="line"> SESSION_ID        4778665c-a079-429a-9b5b-7e8c6c274adf                                                                                                                                                                                                                    </span><br><span class="line"> AGENT_ID          BZNJK8O6YFVX3VTOEJBL                                                                                                                                                                                                                                    </span><br><span class="line"> TUNNEL_SERVER     ws://192.168.117.128:7777/ws                                                                                                                                                                                                                            </span><br><span class="line"> TUNNEL_CONNECTED  true</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>查看当前进程的信息</p><blockquote><p>dashboard</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ID      NAME                                            GROUP                   PRIORITY        STATE           %CPU            DELTA_TIME      TIME            INTERRUPTED     DAEMON</span><br><span class="line">-1      VM Periodic Task Thread                         -                       -1              -               0.09            0.004           0:2.135         false           true</span><br><span class="line">88      Timer-for-arthas-dashboard-2140f455-7b16-4372-9 system                  5               RUNNABLE        0.03            0.001           0:0.783         false           true</span><br><span class="line"></span><br><span class="line">Memory                                   used          total         max          usage         GC</span><br><span class="line">heap                                     73M           115M          866M         8.51%         gc.ps_scavenge.count                            12</span><br><span class="line">ps_eden_space                            42M           51M           304M         13.91%        gc.ps_scavenge.time(ms)                         203</span><br><span class="line">ps_survivor_space                        192K          512K          512K         37.50%        gc.ps_marksweep.count                           2</span><br><span class="line">ps_old_gen                               31M           63M           649M         4.80%         gc.ps_marksweep.time(ms)                        61</span><br><span class="line">nonheap                                  38M           46M           -1           83.48%</span><br><span class="line">code_cache                               9M            10M           240M         4.13%</span><br><span class="line">metaspace                                25M           32M           -1           80.01%</span><br><span class="line">compressed_class_space                   3M            4M            1024M        0.30%</span><br><span class="line">direct                                   8K            8K            -            100.01%</span><br><span class="line">mapped                                   0K            0K            -            0.00%</span><br><span class="line"></span><br><span class="line">Runtime</span><br><span class="line">os.name                                                                                         Linux</span><br><span class="line">os.version                                                                                      5.15.0-48-generic</span><br><span class="line">java.version                                                                                    1.8.0_342</span><br><span class="line">java.home                                                                                       /usr/lib/jvm/java-8-openjdk-amd64/jre</span><br><span class="line">systemload.average                                                                              0.00</span><br><span class="line">processors                                                                                      8</span><br><span class="line">timestamp/uptime                                                                                Sun Oct 16 09:31:20 UTC 2022/2211s</span><br></pre></td></tr></table></figure><blockquote><p>参数说明</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">线程区域</span><br><span class="line">ID： Java级别的县城ID，这个ID不能跟jstack中的nativeID一一对应</span><br><span class="line">NAME: 线程名</span><br><span class="line">GROUP: 线程组名</span><br><span class="line">PRIORITY: 线程优先级，只是JAVA给操作系统建议的一种优先级</span><br><span class="line">STATE:线程的状态</span><br><span class="line">CPU%:线程CPU的使用率。比如采样间隔为1000ms，某个线程的增量cpu时间为100ms，则CPU的使用率=100/1000 = 10%</span><br><span class="line">DELTA_TIME:上次采样之后线程运行增量CPU的时间，单位为秒</span><br><span class="line">TIME:线程运行总CPU时间，数据格式为分:秒</span><br><span class="line">INTERRUPTED:线程当前是否出去中断的状态</span><br><span class="line">DAEMON:是否为守护线程</span><br><span class="line">内存区域</span><br><span class="line">heap：堆内存信息</span><br><span class="line">eden_space：新生代中的eden区占用内存信息</span><br><span class="line">survivor_space：新生代中survivor区占用内存信息</span><br><span class="line">tenured_gen：老年代的内存占用信息</span><br><span class="line">nonheap：非堆的内存占用信息（非堆就是JVM留给自己用的，所以方法区、JVM内部处理或优化所需的内存(如JIT编译后的代码缓存)、每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法的代码都在非堆内存中）</span><br><span class="line">code_cache：JIT缓存区域占用内存信息</span><br><span class="line">metaspace：元数据区占用内存信息（受操作系统内存大小的限制）</span><br><span class="line">compressed_class_space：指针压缩 用32位的offset代表64位的classpointer</span><br><span class="line">direct：直接内存</span><br><span class="line">mapped：内存映射缓冲区（一般来说频繁读写文件可能导致此区域偏高）</span><br><span class="line">系统信息区域</span><br><span class="line">os.name：操作系统名称</span><br><span class="line">os.version：操作系统版本</span><br><span class="line">java.version：JAVA版本</span><br><span class="line">java.home：JDK路径</span><br><span class="line">systemload.average：平均负载（这个参数的意义暂时未知）</span><br><span class="line">processors：处理器个数</span><br><span class="line">timestamp/uptime：当前时间戳/当前系统启动时间-现在</span><br></pre></td></tr></table></figure></li><li><p>通过 thread 命令来获取到进程的 Main Class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread 1 | grep &#x27;main(&#x27;</span><br></pre></td></tr></table></figure></li><li><p>通过 jad 来反编译 Main Class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jad arthasTest.MathGame</span><br></pre></td></tr></table></figure></li><li><p>通过watch命令来查看函数的返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch arthasTest.MathGame primeFactors returnObj</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双亲委派模型</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="双亲委派模型过程"><a href="#双亲委派模型过程" class="headerlink" title="双亲委派模型过程"></a>双亲委派模型过程</h2><blockquote><p>某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p></blockquote><p><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/01.png" alt="图1"></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式7大原则</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式的目的"><a href="#设计模式的目的" class="headerlink" title="设计模式的目的"></a>设计模式的目的</h1><ol><li>代码重用性（即：相同的代码，不用多次编写）</li><li>可读性（即：编程规范性，便于其他程序员的阅读和理解）</li><li>可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护）</li><li>可靠性（即：当我们增加新的功能后，对原来的功能没有影响）</li><li>使程序呈现高内聚，低耦合的特性</li></ol><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><ul><li>定义：不要存在多于一个导致类变更的原因</li><li>一个类/接口/方法只负责一项职责或职能<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3></li><li>降低类的复杂度；</li><li>提高类的可读性，因为类的职能单一，看起来比较有目的性，显得简单；</li><li>提高系统的可维护性，降低变更程序引起的风险。<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3>如果一味追求这个单一职责，有时也会造成类的大爆炸。。。。。。。不过接口和方法应该遵循这个原则。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>对类来说，一个类只负责一项职责。</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</p><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>依赖倒转原则是指：</p><ol><li>高层模块不应该依赖底层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖细节，细节应该依赖抽象</li><li>依赖倒转的中心思想是面向接口编程</li><li>依赖倒转原则是基于这样的理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</li></ol><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>要针对接口编程，而不是针对实现编程。在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入(DependencyInjection, DI)的方式注入到其他对象中。常用的注入方式有三种，分别是：构造注入，设值注入（Setter注入）和接口注入</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><ol><li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代还成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</li><li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法</li><li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题</li></ol><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><p>尽量不要重写父类的方法</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><ol><li>一个软件实体如类，模块和函数应该对扩展开放（对提供方，比如增加类），对修改关闭（对使用方）。用抽象构建框架，用实体扩展细节。</li><li>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><ol><li>一个对象应该对其他对象保持最少的了解</li><li>类与类关系越密切，耦合度越大</li><li>迪米特法则又叫最少知道原则，即一个类对自己依赖的类知道的越少越好，也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部，对外除了提供public方法，不对外泄露任何信息</li><li>迪米特法则还有个更简单的定义：只与直接的朋友通信</li><li>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</li></ol><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><p>原则是尽量使用合成/聚合的方式，而不是使用继承</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编译都通过不了</p><ol><li>类中用到了对方</li><li>如果是类的成员属性</li><li>如果是方法的返回类型</li><li>是方法接收的参数类型</li><li>方法中使用到<br><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/04.png" alt="图1"></li></ol><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><p>泛化关系实际上就是继承关系，他是继承关系的特例</p><ol><li>泛化关系实际上就是继承关系</li><li>如果A类继承了B类，我们就说A和B存在泛化关系<br><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/05.png" alt="图1"></li></ol><h3 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h3><p>实现关系实际上就是A类实现B类，他是依赖关系的特例<br><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/06.png" alt="图1"></p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>关联关系实际上就是类与类之间的联系，他是依赖关系的特例<br><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/07.png" alt="图1"></p><h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><p>表示的是整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以他具有关联的导航性与多重性<br><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/08.png" alt="图1"></p><p>（用set方法注入）</p><h3 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h3><p>如果整体与部分无法分开，则升级为组合关系<br>如果在程序中Person实体中定义了对IDCard进行级联删除，即删除Person时连同IDCard一起删除，那么IDCard和Person就是组合了.</p><p><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/09.png" alt="图1"></p><p>（直接new）</p><p><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/10.png" alt="图1"></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（一）单例模式</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h1><h2 id="一、饿汉式（静态常量）-可用"><a href="#一、饿汉式（静态常量）-可用" class="headerlink" title="一、饿汉式（静态常量）[可用]"></a>一、饿汉式（静态常量）[可用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private final static Singleton INSTANCE = new Singleton();</span><br><span class="line"></span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、饿汉式（静态代码块）-可用"><a href="#二、饿汉式（静态代码块）-可用" class="headerlink" title="二、饿汉式（静态代码块）[可用]"></a>二、饿汉式（静态代码块）[可用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static Singleton instance;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Singleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、懒汉式-线程不安全-不可用"><a href="#三、懒汉式-线程不安全-不可用" class="headerlink" title="三、懒汉式(线程不安全)[不可用]"></a>三、懒汉式(线程不安全)[不可用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static Singleton singleton;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            singleton = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、懒汉式-线程安全，同步方法-不推荐用"><a href="#四、懒汉式-线程安全，同步方法-不推荐用" class="headerlink" title="四、懒汉式(线程安全，同步方法)[不推荐用]"></a>四、懒汉式(线程安全，同步方法)[不推荐用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static Singleton singleton;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized Singleton getInstance() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            singleton = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：效率太低了，每个线程在想获得类的实例时候，执行 getInstance() 方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低要改进。</p><h2 id="五、懒汉式-线程安全，同步代码块-不可用"><a href="#五、懒汉式-线程安全，同步代码块-不可用" class="headerlink" title="五、懒汉式(线程安全，同步代码块)[不可用]"></a>五、懒汉式(线程安全，同步代码块)[不可用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static Singleton singleton;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                singleton = new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。但是这种同步并不能起到线程同步的作用。跟第 3 种实现方式遇到的情形一致，假如一个线程进入了 if (singleton == null) 判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p><h2 id="六、双重检查-推荐用"><a href="#六、双重检查-推荐用" class="headerlink" title="六、双重检查[推荐用]"></a>六、双重检查[推荐用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static volatile Singleton singleton;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if (singleton == null) &#123;</span><br><span class="line">                    singleton = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Double-Check 概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次 if (singleton == null) 检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断 if (singleton == null)，直接 return 实例化对象。</p><p>volatile关键字为了防止编译器指令重排</p><p>优点：线程安全；延迟加载；效率较高</p><h2 id="七、静态内部类-推荐用"><a href="#七、静态内部类-推荐用" class="headerlink" title="七、静态内部类[推荐用]"></a>七、静态内部类[推荐用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    private static class SingletonInstance &#123;</span><br><span class="line">        private static final Singleton INSTANCE = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        return SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要 Singleton 类被装载就会实例化，没有 Lazy-Loading 的作用，而静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance 方法，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化。</p><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p><p>优点：避免了线程不安全，延迟加载，效率高</p><h2 id="八、枚举-推荐用"><a href="#八、枚举-推荐用" class="headerlink" title="八、枚举[推荐用]"></a>八、枚举[推荐用]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void whateverMethod() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在 JDK1.5 中才添加，所以在实际项目开发中，很少见人这么写过</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点故障与分布式锁</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8D%95%E7%82%B9%E6%95%85%E9%9A%9C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8D%95%E7%82%B9%E6%95%85%E9%9A%9C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是zookeeper"><a href="#什么是zookeeper" class="headerlink" title="什么是zookeeper"></a>什么是zookeeper</h1><blockquote><p>服务注册与发现中心<br>解决了分布式锁的问题</p></blockquote><h2 id="单点故障"><a href="#单点故障" class="headerlink" title="单点故障"></a>单点故障</h2><p>有一个主服务器，两个从服务器，主服务器调用两个从服务器，主服务器挂了，两个从服务还可以调用服务，这就是单点故障<br>传统解决方案是：有一个备用节点，当主节点挂了，备用节点代替主节点，但之前的主节点可能只是因为网络问题，没有及时返回备用节点，所以备用节点误以为主节点挂了，就会出现双主问题，请求会重复，数据就会有问题。</p><h3 id="解决单点故障，分布式锁"><a href="#解决单点故障，分布式锁" class="headerlink" title="解决单点故障，分布式锁"></a>解决单点故障，分布式锁</h3><p>zookeeper：所有的服务器都向zookeeper注册，zookeeper维护了一个节点列表，zookeeper会进行选举，剩下的备用节点就会进入阻塞状态，当出现网络震荡的时候，主节点会从zookeeper列表中删除，删除后由备用节点继续选举。如果原来的主节点网络震荡后重新上线，它就会重新注册成另一个新的节点，成为备用节点。</p><h3 id="为什么需要分布式锁"><a href="#为什么需要分布式锁" class="headerlink" title="为什么需要分布式锁"></a>为什么需要分布式锁</h3><p>用户下订单 访问服务器，通过了nginx负载均衡，发放到3个订单服务器上，3个服务器同时下订单，会产生数据错误</p><h3 id="什么是zookeeper-1"><a href="#什么是zookeeper-1" class="headerlink" title="什么是zookeeper?"></a>什么是zookeeper?</h3><blockquote><p>zookeeper是一个为分布式应用提供一致性的开源组件，它内部是一个分层的文件系统目录树结构，规定同一个目录下只能有一个唯一的文件名</p></blockquote><h3 id="zookeeper实现分布式锁的步骤"><a href="#zookeeper实现分布式锁的步骤" class="headerlink" title="zookeeper实现分布式锁的步骤"></a>zookeeper实现分布式锁的步骤</h3><ol><li>创建一个目录MyZookeeper</li><li>线程A想获取锁就在MyZookeeper目录下创建临时顺序节点</li><li>获取MyZookeeper目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁</li><li>线程B获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点</li><li>线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁</li></ol><p>线程 A</p><pre><code>拿到master-002节点，和其他节点比对，发现master-001节点比自己小,获取master-001节点</code></pre><p>线程 B</p><pre><code>master-002，发现线程A在用master-001，就监听master-001节点的状态</code></pre><p>MyZookeeper</p><pre><code>master-001master-002master-0033个主节点等着被调用</code></pre><p>就是3个服务等着被调用，并发线程A、B进来调用，A首先拿到了master-002，发现自己拿的有更小的master-001，就获取master-001，线程B进来获取了master-002，发现线程A在用master-001，就监听master-001节点的状态，线程A处理完后，释放了锁，删除了master-001节点，线程B监听到了master-001的变化，就再一判断自己是不是最小的节点，如果是就获得锁</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql优化</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/mysql%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/mysql%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="为什么要优化"><a href="#为什么要优化" class="headerlink" title="为什么要优化"></a>为什么要优化</h2><ul><li>系统的吞吐量瓶颈往往出现在数据库的访问速度上</li><li>随着应用程序的运行，数据库的中的数据会越来越多，处理时间会相应变慢</li><li>数据是存放在磁盘上的，读写速度无法和内存相比</li></ul><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><ul><li>设计数据库时：数据库表、字段的设计，存储引擎</li><li>利用好MySQL自身提供的功能，如索引等</li><li>横向扩展：MySQL集群、负载均衡、读写分离</li><li>SQL语句的优化（收效甚微）</li></ul><h1 id="字段设计"><a href="#字段设计" class="headerlink" title="字段设计"></a>字段设计</h1><blockquote><p>字段类型的选择，设计规范，范式，常见设计案例</p></blockquote><h2 id="原则：尽量使用整型表示字符串"><a href="#原则：尽量使用整型表示字符串" class="headerlink" title="原则：尽量使用整型表示字符串"></a>原则：尽量使用整型表示字符串</h2><h3 id="存储IP"><a href="#存储IP" class="headerlink" title="存储IP"></a>存储IP</h3><p>INET_ATON(str)，address to number<br>INET_NTOA(number)，number to address</p><h3 id="MySQL内部的枚举类型（单选）和集合（多选）类型"><a href="#MySQL内部的枚举类型（单选）和集合（多选）类型" class="headerlink" title="MySQL内部的枚举类型（单选）和集合（多选）类型"></a>MySQL内部的枚举类型（单选）和集合（多选）类型</h3><blockquote><p>decimal不会损失精度，存储空间会随数据的增大而增大。double占用固定空间，较大数的存储会损失精度。非定长的还有varchar、text</p></blockquote><h3 id="金额"><a href="#金额" class="headerlink" title="金额"></a>金额</h3><blockquote><p>对数据的精度要求较高，小数的运算和存储存在精度问题（不能将所有小数转换成二进制）</p></blockquote><h3 id="定点数decimal"><a href="#定点数decimal" class="headerlink" title="定点数decimal"></a>定点数decimal</h3><p>price decimal(8,2)有2位小数的定点数，定点数支持很大的数（甚至是超过int,bigint存储范围的数）</p><h3 id="小单位大数额避免出现小数"><a href="#小单位大数额避免出现小数" class="headerlink" title="小单位大数额避免出现小数"></a>小单位大数额避免出现小数</h3><p>元-&gt;分</p><h3 id="字符串存储"><a href="#字符串存储" class="headerlink" title="字符串存储"></a>字符串存储</h3><p>定长char，非定长varchar、text（上限65535，其中varchar还会消耗1-3字节记录长度，而text使用额外空间记录长度）</p><h2 id="原则：尽可能选择小的数据类型和指定短的长度"><a href="#原则：尽可能选择小的数据类型和指定短的长度" class="headerlink" title="原则：尽可能选择小的数据类型和指定短的长度"></a>原则：尽可能选择小的数据类型和指定短的长度</h2><h2 id="原则：尽可能使用-not-null"><a href="#原则：尽可能使用-not-null" class="headerlink" title="原则：尽可能使用 not null"></a>原则：尽可能使用 not null</h2><p>非null字段的处理要比null字段的处理高效些！且不需要判断是否为null。</p><p>null在MySQL中，不好处理，存储需要额外空间，运算也需要特殊的运算符。如select null = null和select null &lt;&gt; null（&lt;&gt;为不等号）有着同样的结果，只能通过is null和is not null来判断字段是否为null。</p><p>如何存储？MySQL中每条记录都需要额外的存储空间，表示每个字段是否为null。因此通常使用特殊的数据进行占位，比如int not null default 0、string not null default ‘’</p><h2 id="原则：字段注释要完整，见名知意"><a href="#原则：字段注释要完整，见名知意" class="headerlink" title="原则：字段注释要完整，见名知意"></a>原则：字段注释要完整，见名知意</h2><h2 id="原则：单表字段不宜过多"><a href="#原则：单表字段不宜过多" class="headerlink" title="原则：单表字段不宜过多"></a>原则：单表字段不宜过多</h2><p>二三十个就极限了</p><h2 id="原则：可以预留字段"><a href="#原则：可以预留字段" class="headerlink" title="原则：可以预留字段"></a>原则：可以预留字段</h2><blockquote><p>在使用以上原则之前首先要满足业务需求</p></blockquote><h2 id="执行计划explain"><a href="#执行计划explain" class="headerlink" title="执行计划explain"></a>执行计划explain</h2>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>创建接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IPerson &#123;</span><br><span class="line">    public void sayHi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class PersonImpl implements IPerson &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHi() &#123;</span><br><span class="line">        System.out.println(666);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class MainProxy implements IPerson &#123;</span><br><span class="line">    private IPerson target;</span><br><span class="line"></span><br><span class="line">    public IPerson getTarget() &#123;</span><br><span class="line">        return target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MainProxy setTarget(IPerson target) &#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sayHi() &#123;</span><br><span class="line">        if (target != null) &#123;</span><br><span class="line">            System.out.println(&quot;man say invoked at : &quot; + System.currentTimeMillis());</span><br><span class="line">            target.sayHi();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MainProxy proxy = new MainProxy();</span><br><span class="line">        proxy.setTarget(new PersonImpl()).sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>每个代理类都要实现接口，难维护</p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>创建接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IPerson &#123;</span><br><span class="line">    public void sayHi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class PersonImpl implements IPerson &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHi() &#123;</span><br><span class="line">        System.out.println(666);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public MyInvocationHandler(Object target)&#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;方法执行前&quot;);</span><br><span class="line">        method.invoke(target,args);</span><br><span class="line">        System.out.println(&quot;方法执行后&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IPerson person = new PersonImpl();</span><br><span class="line">        MyInvocationHandler myInvocationHandler = new MyInvocationHandler(person);</span><br><span class="line">        IPerson proxyPerson = (IPerson)Proxy.newProxyInstance(person.getClass().getClassLoader(),</span><br><span class="line">                person.getClass().getInterfaces(), myInvocationHandler);</span><br><span class="line">        proxyPerson.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>代理的对象是Object类型，所以它是被多个接口代理复用的，解决静态代理类爆炸，维护困难的问题，但是被代理的类一定要实现接口</p><h1 id="CGLIB"><a href="#CGLIB" class="headerlink" title="CGLIB"></a>CGLIB</h1><p>可以代理没有接口的普通类</p><p>CGLIB原理：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。它比使用java反射的JDK动态代理要快。</p><p>CGLIB缺点：对于final方法，无法进行代理。</p><p>创建普通类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class PersonService &#123;</span><br><span class="line"></span><br><span class="line">    public PersonService()&#123;</span><br><span class="line">        System.out.println(&quot;PersonService的构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    final public String getPerson(String code)&#123;</span><br><span class="line">        System.out.println(&quot;PersonService:getPerson&gt;&gt;&quot;+code);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPerson() &#123;</span><br><span class="line">        System.out.println(&quot;PersonService:setPerson&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建代理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class CglibProxyInterceptor implements MethodInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object intercept(Object sub, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;执行前...&quot;);</span><br><span class="line">        Object object = methodProxy.invokeSuper(sub, objects);</span><br><span class="line">        System.out.println(&quot;执行后...&quot;);</span><br><span class="line">        return object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Enhancer enhancer = new Enhancer();</span><br><span class="line">        enhancer.setSuperclass(PersonService.class);</span><br><span class="line">        enhancer.setCallback(new CglibProxyInterceptor());</span><br><span class="line">        PersonService proxy= (PersonService)  enhancer.create();</span><br><span class="line">        proxy.setPerson();</span><br><span class="line">        proxy.getPerson(&quot;1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/LinkedList/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/LinkedList/</url>
      
        <content type="html"><![CDATA[<p>LinkedList 是一个继承于AbstractSequentialList的双向循环链表。它也可以被当作堆栈、队列或双端队列进行操作。 LinkedList 实现 List 接口，能对它进行队列操作。 LinkedList 实现 Deque 接口，即能将LinkedList当作双端队列使用。 LinkedList 实现了Cloneable接口，即覆盖了函数clone()，能克隆。 LinkedList 实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。 LinkedList 是非同步的。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/Spring%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h1><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>事务是一个不可分割的单位，要么都发生，要么都不发生。</p><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>事务执行前后数据的完整性必须保持一致。</p><h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><p>多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务干扰。多个并发事务的数据相互隔离。</p><h2 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h2><p>事务一旦被提交后，数据就会被持久化到数据库中。</p><h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><blockquote><p>事务隔离级别的设置是为了解决脏读，不可重复读，幻读等问题的。<br>下面来看下这几个问题的描述。</p></blockquote><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>一个事务a读取了另一个事务b改写还未提交的数据，如果另一个事务b回滚，事务a读取到的数据是无效的。</p><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p>在同一个事务中，多次读取同一数据读取到的结果不同。比如事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p><h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p>一个事务读取了几行数据后，另一个事务插入了新的数据后，幻读就发生了。再后来的查询中，第一个事务就会发现一些原来没有的数据。比如系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><blockquote><p>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。<br>为解决上面几个问题，引入事务隔离级别的概念。</p></blockquote><h1 id="事务隔离级别-1"><a href="#事务隔离级别-1" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><p><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/02.png" alt="图1"></p><blockquote><p>其中Spring中默认设置的default隔离级别的值就是数据库的默认隔离级别，比如mysql的默认隔离级别就是repeatable_read级别。</p></blockquote><h1 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h1><blockquote><p>应用架构通常分为web层，service层和持久化层。一般事务机制添加在service层上，service层中的多个方法之间的调用就涉及到事务传播机制，当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。<br>事务传播行为有下面几种：</p></blockquote><p><img src="/blog/img/md/%E9%9D%A2%E8%AF%95%E9%A2%98/03.png" alt="图1"></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK1.8 HashMap</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/JDK1.8%20HashMap/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/JDK1.8%20HashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK1-8-HashMap"><a href="#JDK1-8-HashMap" class="headerlink" title="JDK1.8 HashMap"></a>JDK1.8 HashMap</h1><h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; //默认容量16</span><br><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; //最大容量</span><br><span class="line">static final float DEFAULT_LOAD_FACTOR = 0.75f; //默认负载因子</span><br><span class="line">static final int TREEIFY_THRESHOLD = 8; //链表节点转红黑树节点的阙值</span><br><span class="line">static final int UNTREEIFY_THRESHOLD = 6; //红黑树节点转链表节点的阙值，6个节点转</span><br><span class="line">static final int MIN_TREEIFY_CAPACITY = 64; //转红黑树时，table的最小长度</span><br></pre></td></tr></table></figure><h2 id="定位哈希桶数组索引位置"><a href="#定位哈希桶数组索引位置" class="headerlink" title="定位哈希桶数组索引位置"></a>定位哈希桶数组索引位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//代码1</span><br><span class="line">static final int hash(Object key) &#123; //计算key的hash值</span><br><span class="line">    int h;</span><br><span class="line">    //先拿到key的hashCode值;2.将hashCode的高16参与运算（异或运算）</span><br><span class="line">    //异或运算：1^1=0 0^1=1 0^0=0 相同为0 不同为1</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br><span class="line">//代码2</span><br><span class="line">int n = tab.length;</span><br><span class="line">// 将（tab.length - 1）与hash值进行&amp;运算</span><br><span class="line">int index = (n -1) &amp; hash;</span><br></pre></td></tr></table></figure><p>整个过程本质上就是三步：</p><ol><li>拿到key的hashCode值</li><li>将hashCode的高位参与运算，重新计算hash值</li><li>将计算出来的hash值与(table.length - 1)进行&amp;运算</li></ol><p>下图是一个简单的例子，table长度为16：<br><img src="https://note.youdao.com/yws/public/resource/5d0022e3a085d56a95c3c3120ca07735/xmlnote/9FCF54B605B04111A28F540CC44BB437/2359"></p><h2 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">               boolean evict) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">    //table 是否为空或者length等于，如果是则调用resize方法进行初始化</span><br><span class="line">    if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    //通过hash值计算索引位置，如果table该索引位置的节点为空则新增一个</span><br><span class="line">    if ((p = tab[i = (n - 1) &amp; hash]) == null)  //将索引的头结点赋值给p</span><br><span class="line">        tab[i] = newNode(hash, key, value, null);</span><br><span class="line">    else &#123;  //table该索引位置不为空</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        if (p.hash == hash &amp;&amp; // 判断p节点的hash值和key值跟传入的hash值和key值是否相等</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;  // 如果相等，则p节点即为要查找的目标节点，赋值给e</span><br><span class="line">        //判断p节点是否为TreeNode，如果是则调用红黑树的putTreeVal方法查找目标节点</span><br><span class="line">        else if (p instanceof TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">        else &#123; // 到这代表p节点为普通链表节点</span><br><span class="line">            for (int binCount = 0; ; ++binCount) &#123; //遍历链表，binCount用于统计节点数</span><br><span class="line">                if ((e = p.next) == null) &#123; //p.next为空代表不存在目标节点则新增一个节点插入链表尾部</span><br><span class="line">                    p.next = newNode(hash, key, value, null);</span><br><span class="line">                    //计算节点数是否超过8个，减一是因为循环从p节点的下一个节点开始的</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                        treeifyBin(tab, hash); // 如果超过8个，调用treeifyBin将该链表转换为红黑树</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    break; //e节点的hash值和key值与传入的相等，则e即为目标节点，跳出循环</span><br><span class="line">                p = e; // 将p指向下一个节点</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // e不为空则代表根据传入的hash值和key值查找到了节点，将该节点的value覆盖，返回原来的值</span><br><span class="line">        if (e != null) &#123; // existing mapping for key</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e); //用于LinkedHashMap</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount; //modCount用于记录HashMap的修改次数</span><br><span class="line">    if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="treeifyBin-将该链表转换为红黑树"><a href="#treeifyBin-将该链表转换为红黑树" class="headerlink" title="treeifyBin 将该链表转换为红黑树"></a>treeifyBin 将该链表转换为红黑树</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span><br><span class="line">    int n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    // table为空或者table的数组长度小于64，进行扩容</span><br><span class="line">    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    //根据hash值计算索引值，遍历该索引位置的链表</span><br><span class="line">    else if ((e = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = null, tl = null;</span><br><span class="line">        do &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null); //链表节点转红黑树节点</span><br><span class="line">            if (tl == null) //tl为空代表第一次循环</span><br><span class="line">                hd = p; //头结点</span><br><span class="line">            else &#123;</span><br><span class="line">                p.prev = tl; //当前节点的prev属性设为上一个节点</span><br><span class="line">                tl.next = p; //上一个节点的next属性设置为当前节点</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p; //tl赋值为p，在下一次循环中作为上一个节点</span><br><span class="line">        &#125; while ((e = e.next) != null); //e指向下一个节点</span><br><span class="line">        // 将table该索引位置赋值为新转的TreeNode的头节点</span><br><span class="line">        if ((tab[index] = hd) != null)</span><br><span class="line">            hd.treeify(tab); //以头节点为根节点，构建红黑树</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="replacementTreeNode方法解析"><a href="#replacementTreeNode方法解析" class="headerlink" title="replacementTreeNode方法解析"></a>replacementTreeNode方法解析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 该方法只是调用了TreeNode类的构造方法，依据当前节点信息构造一个树节点对象</span><br><span class="line">TreeNode&lt;K,V&gt; replacementTreeNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">    return new TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 首先该类是HashMap类的一个静态内部类</span><br><span class="line"> * 包内可见、不可被继承</span><br><span class="line"> * 该类继承了LinkedHashMap.Entry，而LinkedHashMap.Entry继承了HashMap.Node</span><br><span class="line"> * PS：要知道LinkedHashMap是HashMap的子类，然而目前的状况是HashMap作为父类，他的一个静态内部类（TreeNode）居然继承了子类LinkedHashMap的一个静态内部类</span><br><span class="line"> *（LinkedHashMap.Entry），这个设计不太理解。</span><br><span class="line"> * 红黑树是一个二叉树，父节点、左节点、右节点、红黑标识都是二叉树中的元素</span><br><span class="line"> */</span><br><span class="line">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class="line">    boolean red;</span><br><span class="line">    TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        super(hash, key, val, next); // 此处调用 LinkedHashMap.Entry的构造方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再看下LinkedHashMap.Entry类的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 首先该类是LinkedHashMap的一个静态内部类</span><br><span class="line"> * 包内可见、又因为没有final修饰符（所以HashMap中的TreeNode类才能继承到他）</span><br><span class="line"> * 该类除了增加了before、after两个实例变量之外，没有任何的行为扩展，也就是说他的所有行为都继承自HashMap.Node</span><br><span class="line"> * 该类也只有一个构造方法，且该构造方法就是通过调用HashMap.Node的构造方法构造一个HashMap.Node对象</span><br><span class="line"> * PS：看到这里就更加不理解为何HashMap.TreeNode不直接继承HashMap.Node，而要绕个弯来继承LinkedHashMap.Entry，难道是为了使用before、after？可貌似也没有使用到。</span><br><span class="line"> */</span><br><span class="line">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        super(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="treeify-构建红黑树"><a href="#treeify-构建红黑树" class="headerlink" title="treeify 构建红黑树"></a>treeify 构建红黑树</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">final void treeify(Node&lt;K,V&gt;[] tab) &#123; //构建红黑树</span><br><span class="line">    TreeNode&lt;K,V&gt; root = null;</span><br><span class="line">    for (TreeNode&lt;K,V&gt; x = this, next; x != null; x = next) &#123; //this即为调用此方法的TreeNode</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next; //next赋值为x的下一个节点</span><br><span class="line">        x.left = x.right = null; //将x的左右节点设置为空</span><br><span class="line">        if (root == null) &#123; //如果还没有根节点，则将x设置为根节点</span><br><span class="line">            x.parent = null; //根节点没有父节点</span><br><span class="line">            x.red = false; //根节点必须为黑色</span><br><span class="line">            root = x; //将x设置为根节点</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            K k = x.key;        // k赋值为x的key</span><br><span class="line">            int h = x.hash;     // h赋值为x的hash值</span><br><span class="line">            Class&lt;?&gt; kc = null;</span><br><span class="line">            //如果当前节点x不是根节点，则从根节点开始查找属于该节点的位置</span><br><span class="line">            for (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                int dir, ph;</span><br><span class="line">                K pk = p.key;</span><br><span class="line">                if ((ph = p.hash) &gt; h) //如果x节点的hash值小于p节点的hash值</span><br><span class="line">                    dir = -1; //则将dir赋值为-1，代表x节点的hash值小于p节点的hash值</span><br><span class="line">                else if (ph &lt; h) //与上面相反，如果x节点的hash值大于p节点的hash值</span><br><span class="line">                    dir = 1;    //则将dir赋值为1，代表向p的右边查找</span><br><span class="line">                </span><br><span class="line">                //走到这代表x的hash值和p的hash值相等，则比较key值</span><br><span class="line">                else if ((kc == null &amp;&amp; //如果k没有实现Comparable接口 或者 x节点key和p节点key相等</span><br><span class="line">                          (kc = comparableClassFor(k)) == null) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == 0)</span><br><span class="line">                         //使用定义的一套规则来比较x节点和p节点的大小，用来决定向左还是向右查找</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p; //xp赋值为x的父节点，中间变量，用于下面给x的父节点赋值</span><br><span class="line">                //dir&lt;=0则向p左边查找，否则向p右边查找，如果为null，则代表该位置即为x的目标位置</span><br><span class="line">                if ((p = (dir &lt;= 0) ? p.left : p.right) == null) &#123;</span><br><span class="line">                    x.parent = xp; //x的父节点即为最后一次遍历的p节点</span><br><span class="line">                    if (dir &lt;= 0) //如果dir&lt;=0，则代表x节点为父节点的左节点</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    else    //如果dir&gt;0，则代表x节点为父节点右节点</span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    // 进行红黑树的插入平衡（通过左旋、右旋和改变节点颜色来保证当前树符合红黑树的要求）</span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root); //如果root节点不在table索引位置的头结点，则将root节点调整到索引位置的头结点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="moveRootToFront-将root节点调整到索引位置的头结点"><a href="#moveRootToFront-将root节点调整到索引位置的头结点" class="headerlink" title="moveRootToFront //将root节点调整到索引位置的头结点"></a>moveRootToFront //将root节点调整到索引位置的头结点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//如果当前索引位置的头结点不是root节点，则将root的上一个节点和下一个节点进行关联</span><br><span class="line">//（转成红黑树后，链式结构还是存在的）将root放到头节点的位置，原头节点放在root的next节点上</span><br><span class="line">static &lt;K,V&gt; void moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root) &#123;</span><br><span class="line">    int n;</span><br><span class="line">    if (root != null &amp;&amp; tab != null &amp;&amp; (n = tab.length) &gt; 0) &#123;</span><br><span class="line">        int index = (n - 1) &amp; root.hash;</span><br><span class="line">        TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line">        if (root != first) &#123; //如果root节点不是该索引位置的头节点</span><br><span class="line">            Node&lt;K,V&gt; rn;</span><br><span class="line">            tab[index] = root; //将该索引位置的头节点赋值为root节点</span><br><span class="line">            TreeNode&lt;K,V&gt; rp = root.prev; //root节点的上一个节点</span><br><span class="line">            // 如果root节点的下一个节点不为空，</span><br><span class="line">            // 则将root节点的下一个节点prev属性设置为root节点的上一个节点</span><br><span class="line">            if ((rn = root.next) != null)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class="line">            if (rp != null)</span><br><span class="line">                rp.next = rn;</span><br><span class="line">            if (first != null) //如果原头节点不为空，则将原头节点的prev属性设置为root节点</span><br><span class="line">                first.prev = root;</span><br><span class="line">            root.next = first; //将root节点的next属性设置为原头节点</span><br><span class="line">            root.prev = null;</span><br><span class="line">        &#125;</span><br><span class="line">        assert checkInvariants(root); //检查树是否正常</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resize-扩容或初始化"><a href="#resize-扩容或初始化" class="headerlink" title="resize 扩容或初始化"></a>resize 扩容或初始化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">    int oldThr = threshold;</span><br><span class="line">    int newCap, newThr = 0;</span><br><span class="line">    if (oldCap &gt; 0) &#123; //老table不为空</span><br><span class="line">        if (oldCap &gt;= MAXIMUM_CAPACITY) &#123; //老table的容量超过最大容量值</span><br><span class="line">            threshold = Integer.MAX_VALUE; //设置阙值为Integer.MAX_VALUE</span><br><span class="line">            return oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果容量*2&lt;最大容量并且&gt;=16，则将阙值设置为原来的两倍</span><br><span class="line">        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">    &#125;</span><br><span class="line">    else if (oldThr &gt; 0) // 老表的容量为0，老表的阙值大于0，是因为初始容量被放入阙值</span><br><span class="line">        newCap = oldThr; //则将新表的容量设置为老表的阙值</span><br><span class="line">    else &#123;               // 老表的容量为0，老表的阙值为0，则为空表，设置默认容量和阙值</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    if (newThr == 0) &#123; //如果新表的阙值为空，则通过新的容量*负载因子获得阙值</span><br><span class="line">        float ft = (float)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (int)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr; //将当前阙赋值为刚计算出来的新的阙值</span><br><span class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">    </span><br><span class="line">    //定义新表，容量为刚计算出来的新容量</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">    table = newTab; //将当前的表赋值为新定义的表</span><br><span class="line">    if (oldTab != null) &#123; //如果老表不为空，则需遍历将节点赋值给新表</span><br><span class="line">        for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            if ((e = oldTab[j]) != null) &#123; //将索引值为j的老表头结点赋值给e</span><br><span class="line">                oldTab[j] = null; //将老表的节点设置为空，以便垃圾收集器回收空间</span><br><span class="line">                //如果e.next为空，则代表老表的该位置只有一个节点</span><br><span class="line">                //通过hash值计算新表的索引位置，直接将该节点放在该位置</span><br><span class="line">                if (e.next == null)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                else if (e instanceof TreeNode)</span><br><span class="line">                    //调用treeNode的hash分布（跟下面最后一个else的内容几乎相同）</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                else &#123; // preserve order</span><br><span class="line">                    Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                            if (loTail == null)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (hiTail == null)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; while ((e = next) != null);</span><br><span class="line">                    if (loTail != null) &#123;</span><br><span class="line">                        loTail.next = null;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (hiTail != null) &#123;</span><br><span class="line">                        hiTail.next = null;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git删除大文件历史记录</title>
      <link href="/blog/2022/04/28/git/%E5%88%A0%E9%99%A4%E5%A4%A7%E6%96%87%E4%BB%B6%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
      <url>/blog/2022/04/28/git/%E5%88%A0%E9%99%A4%E5%A4%A7%E6%96%87%E4%BB%B6%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>git上传文件后会将文件保存，就算删除后也能在commit中看到，这个工具能将文件从历史中删除，包括commit中的操作记录</p></blockquote><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>上传了较大的文件，会导致每次拉取项目的时候执行时间比较长</li><li>上传了私密的信息，比如账号密码</li></ul><h1 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h1><blockquote><p><a href="https://rtyley.github.io/bfg-repo-cleaner/">https://rtyley.github.io/bfg-repo-cleaner/</a><br>需要先到官网下载jar包</p></blockquote><h1 id="大文件的查询"><a href="#大文件的查询" class="headerlink" title="大文件的查询"></a>大文件的查询</h1><blockquote><p>在项目的目录下，windows系统需要在git bash上执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//找出项目中的大文件</span><br><span class="line">git verify-pack -v .git/objects/pack/pack-*.idx | sort -k 3 -g | tail -10</span><br></pre></td></tr></table></figure><p><img src="/blog/img/md/git/delete_history_01.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查询文件名称</span><br><span class="line"> git rev-list --objects --all | grep 3514e1f287dd0722266a35b05b7a7d10923c99f0</span><br></pre></td></tr></table></figure><p><img src="/blog/img/md/git/delete_history_02.png"></p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="1-拉取仓库镜像"><a href="#1-拉取仓库镜像" class="headerlink" title="1. 拉取仓库镜像"></a>1. 拉取仓库镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --mirror git://example.com/some-repo.git</span><br></pre></td></tr></table></figure><p><img src="/blog/img/md/git/delete_history_03.png" alt="image"></p><h2 id="2-文件删除"><a href="#2-文件删除" class="headerlink" title="2. 文件删除"></a>2. 文件删除</h2><h3 id="2-1-单个文件"><a href="#2-1-单个文件" class="headerlink" title="2.1 单个文件"></a>2.1 单个文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar bfg-1.14.0.jar --delete-files test.zip  some-repo.git</span><br></pre></td></tr></table></figure><h3 id="2-2-文件夹"><a href="#2-2-文件夹" class="headerlink" title="2.2 文件夹"></a>2.2 文件夹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar bfg-1.14.0.jar --delete-folders nacos --delete-files nacos  --no-blob-protection  some-repo.git</span><br></pre></td></tr></table></figure><p><img src="/blog/img/md/git/delete_history_04.png" alt="image"><br><img src="/blog/img/md/git/delete_history_05.png" alt="image"></p><h2 id="3-更新仓库"><a href="#3-更新仓库" class="headerlink" title="3. 更新仓库"></a>3. 更新仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd some-repo.git</span><br><span class="line">git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="/blog/img/md/git/delete_history_06.png" alt="image"></p><h2 id="4-删除本地仓库，重新拉取代码"><a href="#4-删除本地仓库，重新拉取代码" class="headerlink" title="4. 删除本地仓库，重新拉取代码"></a>4. 删除本地仓库，重新拉取代码</h2><blockquote><p>如果删除文件后，使用原仓库上传，会将删除的文件再次上传。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList</title>
      <link href="/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/ArrayList/"/>
      <url>/blog/2022/04/28/%E9%9D%A2%E8%AF%95%E9%A2%98/ArrayList/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList的主要成员变量"><a href="#ArrayList的主要成员变量" class="headerlink" title="ArrayList的主要成员变量"></a>ArrayList的主要成员变量</h1><p>private static final int DEFAULT_CAPACITY = 10；</p><blockquote><p>当ArrayList的构造方法中没有显示指出ArrayList的数组长度时，类内部使用默认缺省时对象数组的容量大小，为10。</p></blockquote><p>private static final Object[] EMPTY_ELEMENTDATA = {};</p><blockquote><p>当ArrayList的构造方法中显示指出ArrayList的数组长度为0时，类内部将EMPTY_ELEMENTDATA 这个空对象数组赋给elemetData数组。</p></blockquote><p>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};</p><blockquote><p>当ArrayList的构造方法中没有显示指出ArrayList的数组长度时，类内部使用默认缺省时对象数组为DEFAULTCAPACITY_EMPTY_ELEMENTDATA。</p></blockquote><p>transient Object[] elemetData;</p><blockquote><p>ArrayList的底层数据结构，只是一个对象数组，用于存放实际元素，并且被标记为transient，也就意味着在序列化的时候此字段是不会被序列化的。</p></blockquote><p>private int size;</p><blockquote><p>实际ArrayList中存放的元素的个数，默认时为0个元素。</p></blockquote><p>private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE – 8;</p><blockquote><p>ArrayList中的对象数组的最大数组容量为Integer.MAX_VALUE – 8。</p></blockquote><h1 id="ArrayList的构造方法"><a href="#ArrayList的构造方法" class="headerlink" title="ArrayList的构造方法"></a>ArrayList的构造方法</h1><p>无参构造方法<br>对于无参构造方法，将成员变量elementData的值设为DEFAULTCAPACITY_EMPTY_ELEMENTDATA。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList() &#123; </span><br><span class="line">        // 无参构造函数，设置元素数组为空 </span><br><span class="line">        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>int类型参数构造方法<br>参数为希望的ArrayList的数组的长度，initialCapacity。首先要判断参数initialCapacity与0的大小关系：</p><p>如果initialCapacity大于0，则创建一个大小为initialCapacity的对象数组赋给elementData。</p><p>如果initialCapacity等于0，则将EMPTY_ELEMENTDATA赋给elementData。</p><p>如果initialCapacity小于0，抛出异常（非法的容量）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">    if (initialCapacity &gt; 0) &#123; // 初始容量大于0</span><br><span class="line">        this.elementData = new Object[initialCapacity]; // 初始化元素数组</span><br><span class="line">    &#125; else if (initialCapacity == 0) &#123; // 初始容量为0</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA; // 为空对象数组</span><br><span class="line">    &#125; else &#123; // 初始容量小于0，抛出异常</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Collection&lt;? extends E&gt;类型构造方法<br>第一步，将参数中的集合转化为数组赋给elementData；</p><p>第二步，参数集合是否是空。通过比较size与第一步中的数组长度的大小。</p><p>第三步，如果参数集合为空，则设置元素数组为空，即将EMPTY_ELEMENTDATA赋给elementData；</p><p>第四步，如果参数集合不为空，接下来判断是否成功将参数集合转化为Object类型的数组，如果转化成Object类型的数组成功，则将数组进行复制，转化为Object类型的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList(Collection&lt;? extends E&gt; c) &#123; // 集合参数构造函数</span><br><span class="line">    elementData = c.toArray(); // 转化为数组</span><br><span class="line">    if ((size = elementData.length) != 0) &#123; // 参数为非空集合</span><br><span class="line">        if (elementData.getClass() != Object[].class) // 是否成功转化为Object类型数组</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class); // 不为Object数组的话就进行复制</span><br><span class="line">    &#125; else &#123; // 集合大小为空，则设置元素数组为空</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ArrayList的add-方法"><a href="#ArrayList的add-方法" class="headerlink" title="ArrayList的add()方法"></a>ArrayList的add()方法</h1><p>在add()方法中主要完成了三件事：首先确保能够将希望添加到集合中的元素能够添加到集合中，即确保ArrayList的容量（判断是否需要扩容）；然后将元素添加到elementData数组的指定位置；最后将集合中实际的元素个数加1。</p><p>public boolean add(E e) { // 添加元素<br>    ensureCapacityInternal(size + 1);  // 判断是否需要扩容<br>    elementData[size++] = e;//添加元素<br>    return true;<br>}</p><h1 id="ensureCapacityInternal"><a href="#ensureCapacityInternal" class="headerlink" title="ensureCapacityInternal"></a>ensureCapacityInternal</h1><blockquote><p>确定集合为了确保添加元素成功是否需要对现有的元素数组进行扩容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++; //结构性修改计数器加一</span><br><span class="line"></span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)//如果size+1的容量大于数组长度，则需要扩容</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="grow"><a href="#grow" class="headerlink" title="grow"></a>grow</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // overflow-conscious code</span><br><span class="line">    int oldCapacity = elementData.length; // 旧容量</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 新容量为旧容量的1.5倍</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0) // 新容量小于参数指定容量，修改新容量</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0) // 新容量大于最大容量</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity); //指定新容量</span><br><span class="line">    // 拷贝扩容</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 常见问题</title>
      <link href="/blog/2022/04/28/Mysql/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2022/04/28/Mysql/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="清空自增主键"><a href="#清空自增主键" class="headerlink" title="清空自增主键"></a>清空自增主键</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS=0;</span><br><span class="line">TRUNCATE TABLE 表名;</span><br><span class="line">SET FOREIGN_KEY_CHECKS=1;</span><br><span class="line">SELECT  @@FOREIGN_KEY_CHECKS;</span><br></pre></td></tr></table></figure><h1 id="mysql运行报The-server-time-zone-value-‘OÐ¹u±e×¼E±¼a’"><a href="#mysql运行报The-server-time-zone-value-‘OÐ¹u±e×¼E±¼a’" class="headerlink" title="mysql运行报The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’"></a>mysql运行报The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’</h1><blockquote><p>is unrecognized or represents more than one time zone的解决方法：<br>    将时区设置为你当前系统时区即可，<br>    因此使用root用户登录mysql,使用以下命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%time_zone%&#x27;</span>;</span><br><span class="line"><span class="built_in">set</span> global time_zone=<span class="string">&#x27;+8:00&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="Ubuntu-Server-X64-mysql无法连接"><a href="#Ubuntu-Server-X64-mysql无法连接" class="headerlink" title="Ubuntu Server X64 mysql无法连接"></a>Ubuntu Server X64 mysql无法连接</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysql.cnf</span><br><span class="line">修改bind-address = 0.0.0.0</span><br><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 常用操作</title>
      <link href="/blog/2022/04/28/Maven/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2022/04/28/Maven/%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:resolve -Dclassifier=sources</span><br><span class="line">或者</span><br><span class="line">mvn dependency:sources</span><br><span class="line">mvn dependency:resolve -Dclassifier=javadoc</span><br><span class="line">命令使用方法：首先进入到相应的pom.xml目录中，然后执行以上命令：</span><br><span class="line">第一个命令是尝试下载在pom.xml中依赖的文件的源代码。</span><br><span class="line">第二个命令：是尝试下载对应的javadocs</span><br></pre></td></tr></table></figure><h1 id="将服务器本地的jar添加到服务器本地仓库"><a href="#将服务器本地的jar添加到服务器本地仓库" class="headerlink" title="将服务器本地的jar添加到服务器本地仓库"></a>将服务器本地的jar添加到服务器本地仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.xxx -DartifactId=xxx -Dversion=1.0  -Dpackaging=jar  -Dfile=xxx1.0.jar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7对外开放端口</title>
      <link href="/blog/2022/04/28/Linux/firewall/"/>
      <url>/blog/2022/04/28/Linux/firewall/</url>
      
        <content type="html"><![CDATA[<h1 id="查看对外开放的端口状态"><a href="#查看对外开放的端口状态" class="headerlink" title="查看对外开放的端口状态"></a>查看对外开放的端口状态</h1><blockquote><p>查询已开放的端口 netstat -anp<br>查询指定端口是否已开 firewall-cmd –query-port=666/tcp<br>提示 yes，表示开启；no表示未开启。</p></blockquote><h1 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h1><blockquote><p>查看防火墙状态 systemctl status firewalld<br>开启防火墙 systemctl start firewalld<br>关闭防火墙 systemctl stop firewalld<br>开启防火墙 service firewalld start<br>若遇到无法开启<br>先用：systemctl unmask firewalld.service<br>然后：systemctl start firewalld.service</p></blockquote><h1 id="对外开发端口"><a href="#对外开发端口" class="headerlink" title="对外开发端口"></a>对外开发端口</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看想开的端口是否已开：</span></span><br><span class="line">firewall-cmd --query-port=6379/tcp</span><br><span class="line"><span class="comment">#添加指定需要开放的端口：</span></span><br><span class="line">firewall-cmd --add-port=123/tcp --permanent</span><br><span class="line"><span class="comment">#重载入添加的端口：</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment">#查询指定端口是否开启成功：</span></span><br><span class="line">firewall-cmd --query-port=123/tcp</span><br><span class="line"><span class="comment">#移除指定端口：</span></span><br><span class="line">firewall-cmd --permanent --remove-port=123/tcp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsftpd虚拟用户</title>
      <link href="/blog/2022/04/28/Linux/vsftpd%E8%99%9A%E6%8B%9F%E7%94%A8%E6%88%B7/"/>
      <url>/blog/2022/04/28/Linux/vsftpd%E8%99%9A%E6%8B%9F%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disabled firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install vsftpd -y</span><br><span class="line"><span class="built_in">cd</span> /etc/vsftpd/</span><br><span class="line"><span class="comment">#创建虚拟用户</span></span><br><span class="line">vim loginusers</span><br><span class="line">    ftp1</span><br><span class="line">    123</span><br><span class="line">    ftp2</span><br><span class="line">    123</span><br><span class="line">db_load -T -t <span class="built_in">hash</span> -f loginusers loginusers.db</span><br><span class="line">chmod 600 loginusers*</span><br><span class="line">vim /etc/pam.d/ckvsftpd</span><br><span class="line">    auth required pam_userdb.so db=/etc/vsftpd/loginusers</span><br><span class="line">    account required pam_userdb.so db=/etc/vsftpd/loginusers</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">    pam_service_name=ckvsftpd</span><br><span class="line">    guest_enable=YES</span><br><span class="line">    guest_username=ftp</span><br><span class="line">    local_root=/ftp/<span class="variable">$USER</span></span><br><span class="line">    user_sub_token=<span class="variable">$USER</span></span><br><span class="line">    user_config_dir=/etc/vsftpd/conf.d</span><br><span class="line">mkdir /ftp</span><br><span class="line">chgrp ftp /ftp/</span><br><span class="line">chmod g+s /ftp/</span><br><span class="line">mkdir /ftp/ftp&#123;1..2&#125;</span><br><span class="line">mkidr /ftp/ftp2/upload</span><br><span class="line">chown ftp /ftp/ftp2/upload</span><br><span class="line">mkdir /etc/vsftpd/conf.d</span><br><span class="line">vim /etc/vsftpd/conf.d/ftp1</span><br><span class="line">    local_root=&#123;自定义目录&#125;</span><br><span class="line">vim /etc/vsftpd/conf.d/ftp2</span><br><span class="line">    write_enable=YES</span><br><span class="line">    anon_upload_enable=YES</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kong安装</title>
      <link href="/blog/2022/04/28/Kong/%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2022/04/28/Kong/%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="创建网络环境"><a href="#创建网络环境" class="headerlink" title="创建网络环境"></a>创建网络环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create kong-net --driver bridge</span><br></pre></td></tr></table></figure><h1 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-database --network=kong-net -p 5432:5432 -v /home/iot/kong/pgdata:/var/lib/postgresql/data -v /etc/localtime:/etc/localtime:ro -e <span class="string">&quot;POSTGRES_USER=kong&quot;</span> -e <span class="string">&quot;POSTGRES_DB=kong&quot;</span> -e <span class="string">&quot;POSTGRES_PASSWORD=kong&quot;</span> --restart always postgres:9.6</span><br></pre></td></tr></table></figure><h1 id="初始化kong数据库"><a href="#初始化kong数据库" class="headerlink" title="初始化kong数据库"></a>初始化kong数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --network=kong-net -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> -e <span class="string">&quot;KONG_PG_USER=kong&quot;</span> -e <span class="string">&quot;KONG_PG_PASSWORD=kong&quot;</span> -e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> kong:latest kong migrations bootstrap</span><br></pre></td></tr></table></figure><h1 id="启动kong"><a href="#启动kong" class="headerlink" title="启动kong"></a>启动kong</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong --network=kong-net -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> -e <span class="string">&quot;KONG_PG_USER=kong&quot;</span> -e <span class="string">&quot;KONG_PG_PASSWORD=kong&quot;</span> -e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> -p 80:8000 -p 443:8443 -p 8001:8001 -p 8444:8444 -v /home/iot/kong/nginx.conf:/usr/<span class="built_in">local</span>/kong/nginx.conf -v /home/iot/html:/home/iot/html -v /etc/localtime:/etc/localtime:ro --restart always kong:latest</span><br></pre></td></tr></table></figure><h1 id="初始化konga数据库"><a href="#初始化konga数据库" class="headerlink" title="初始化konga数据库"></a>初始化konga数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm  --network=kong-net pantsel/konga:latest -c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db</span><br></pre></td></tr></table></figure><h1 id="启动konga"><a href="#启动konga" class="headerlink" title="启动konga"></a>启动konga</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 1337:1337 --network=kong-net -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> -e <span class="string">&quot;KONG_PG_USER=kong&quot;</span> -e <span class="string">&quot;KONG_PG_PASSWORD=kong&quot;</span> -e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> -e <span class="string">&quot;DB_DATABASE=konga_db&quot;</span> -e <span class="string">&quot;KONGA_HOOK_TIMEOUT=120000&quot;</span> -v /etc/localtime:/etc/localtime:ro --name konga pantsel/konga</span><br></pre></td></tr></table></figure><h1 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker pull prom/prometheus</span><br><span class="line"></span><br><span class="line">mkdir /opt/prometheus</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/prometheus/</span><br><span class="line"></span><br><span class="line">vim prometheus.yml</span><br><span class="line"></span><br><span class="line">docker run  -d -p 9090:9090 -v /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml -v /etc/localtime:/etc/localtime:ro prom/prometheus:latest</span><br><span class="line"></span><br><span class="line">docker pull grafana/grafana</span><br><span class="line"></span><br><span class="line">mkdir /opt/grafana-storage</span><br><span class="line"></span><br><span class="line">chmod 777 -R /opt/grafana-storage</span><br><span class="line"></span><br><span class="line">docker run -d -p 3000:3000 --name=grafana -v /opt/grafana-storage:/var/lib/grafana -v /etc/localtime:/etc/localtime:ro grafana/grafana</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kong </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins安装</title>
      <link href="/blog/2022/04/28/Jenkins/%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2022/04/28/Jenkins/%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h1><blockquote><p><a href="https://jenkins.io/zh/">https://jenkins.io/zh/</a></p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><img src="/blog/img/md/Jenkins/01.png"><br><img src="/blog/img/md/Jenkins/02.png"></p><ol><li>CMD中执行命令：java -jar jenkins.war（–httpPort=8080）</li><li>浏览<a href="http://localhost:8080并等到*Unlock">http://localhost:8080并等到*Unlock</a> Jenkins*页面出现。</li><li>后台启动执行命令：nohup java -jar jenkins.war –httpPort=18080 &gt;/opt/jenkins/start.log  &amp;</li></ol><h3 id="可能会出现以下问题"><a href="#可能会出现以下问题" class="headerlink" title="可能会出现以下问题"></a>可能会出现以下问题</h3><p><img src="/blog/img/md/Jenkins/03.png"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><img src="/blog/img/md/Jenkins/04.png"><br><img src="/blog/img/md/Jenkins/05.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://mirror.xmission.com/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure><p>重启tomcat就行了</p><h2 id="解锁-Jenkins"><a href="#解锁-Jenkins" class="headerlink" title="解锁 Jenkins"></a>解锁 Jenkins</h2><p><img src="/blog/img/md/Jenkins/06.png"></p><p><img src="/blog/img/md/Jenkins/07.png"></p><h2 id="自定义jenkins插件"><a href="#自定义jenkins插件" class="headerlink" title="自定义jenkins插件"></a>自定义jenkins插件</h2><p>选择：安装建议的插件</p><p>安装额外插件</p><p><img src="/blog/img/md/Jenkins/08.png"></p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p><img src="/blog/img/md/Jenkins/09.png"></p><p><img src="/blog/img/md/Jenkins/10.png"></p><p><img src="/blog/img/md/Jenkins/11.png"></p><h2 id="配置自动化部署"><a href="#配置自动化部署" class="headerlink" title="配置自动化部署"></a>配置自动化部署</h2><h3 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h3><p><img src="/blog/img/md/Jenkins/12.png"></p><p><img src="/blog/img/md/Jenkins/13.png"></p><p><img src="/blog/img/md/Jenkins/14.png"></p><p><img src="/blog/img/md/Jenkins/15.png"></p><p><img src="/blog/img/md/Jenkins/16.png"></p><p><img src="/blog/img/md/Jenkins/17.png"></p><h3 id="发布配置"><a href="#发布配置" class="headerlink" title="发布配置"></a>发布配置</h3><p>配置tomcat<br><img src="/blog/img/md/Jenkins/18.png"></p><p><img src="/blog/img/md/Jenkins/19.png"></p><p><img src="/blog/img/md/Jenkins/20.png"></p><p>配置触发器</p><p><img src="/blog/img/md/Jenkins/21.png"></p><p>只需访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/job/HardwareAlliance/build?token=MY_TOKEN</span><br></pre></td></tr></table></figure><p>便会触发构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X post -v -u admin:e0eae93ad7e74f7ab76545bee47793d1 http://localhost:8081/job/HardwareAlliance/build?token=MY_TOKEN</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins-pipeline</title>
      <link href="/blog/2022/04/28/Jenkins/pipeline/"/>
      <url>/blog/2022/04/28/Jenkins/pipeline/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  agent any</span><br><span class="line">  parameters &#123;</span><br><span class="line">    choice(</span><br><span class="line">      description: <span class="string">&#x27;environment&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">      choices: [<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;prod&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line">    string(name: <span class="string">&#x27;gitUrl&#x27;</span>, defaultValue: <span class="string">&#x27;http://192.168.24.55:8888&#x27;</span>, description: <span class="string">&#x27;gitUrl&#x27;</span>)</span><br><span class="line">    string(name: <span class="string">&#x27;credentialsId&#x27;</span>, defaultValue: <span class="string">&#x27;cky_gitlab&#x27;</span>, description: <span class="string">&#x27;credentialsId&#x27;</span>)</span><br><span class="line">    string(name: <span class="string">&#x27;bossVersion&#x27;</span>, defaultValue: <span class="string">&#x27;1.0&#x27;</span>, description: <span class="string">&#x27;boss-version&#x27;</span>)</span><br><span class="line">    booleanParam(name: <span class="string">&#x27;checkout&#x27;</span>, defaultValue: <span class="literal">true</span>, description: <span class="string">&#x27;checkout&#x27;</span>)</span><br><span class="line">    booleanParam(name: <span class="string">&#x27;install&#x27;</span>, defaultValue: <span class="literal">false</span>, description: <span class="string">&#x27;install-all&#x27;</span>)</span><br><span class="line">    booleanParam(name: <span class="string">&#x27;installSystem&#x27;</span>, defaultValue: <span class="literal">false</span>, description: <span class="string">&#x27;install-system&#x27;</span>)</span><br><span class="line">    booleanParam(name: <span class="string">&#x27;gateway&#x27;</span>, defaultValue: <span class="literal">false</span>, description: <span class="string">&#x27;boss-gateway&#x27;</span>)</span><br><span class="line">    booleanParam(name: <span class="string">&#x27;auth&#x27;</span>, defaultValue: <span class="literal">false</span>, description: <span class="string">&#x27;boss-auth&#x27;</span>)</span><br><span class="line">    booleanParam(name: <span class="string">&#x27;system&#x27;</span>, defaultValue: <span class="literal">false</span>, description: <span class="string">&#x27;boss-system&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  tools &#123;</span><br><span class="line">    maven <span class="string">&quot;maven-3.6.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">      steps&#123;</span><br><span class="line">        script&#123;</span><br><span class="line">          installSh=<span class="string">&quot;mvn clean install -Dmaven.test.skip=true&quot;</span></span><br><span class="line">          <span class="keyword">if</span>( <span class="string">&quot;<span class="variable">$&#123;params.env&#125;</span>&quot;</span> == <span class="string">&#x27;prod&#x27;</span> ) &#123;</span><br><span class="line">            installSh=<span class="string">&quot;mvn clean install -Dmaven.test.skip=true -P prod&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( <span class="string">&quot;<span class="variable">$checkout</span>&quot;</span> == <span class="string">&#x27;true&#x27;</span> ) &#123;</span><br><span class="line">            checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/master&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;boss-core&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&quot;<span class="variable">$credentialsId</span>&quot;</span>, url: <span class="string">&#x27;$&#123;gitUrl&#125;/gitlab/boss/newboss/boss-core.git&#x27;</span>]]])</span><br><span class="line">            checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/master&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;boss-api&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&quot;<span class="variable">$credentialsId</span>&quot;</span>, url: <span class="string">&#x27;$&#123;gitUrl&#125;/gitlab/boss/newboss/boss-api&#x27;</span>]]])</span><br><span class="line">            checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/master&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;boss-system&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&quot;<span class="variable">$credentialsId</span>&quot;</span>, url: <span class="string">&#x27;$&#123;gitUrl&#125;/gitlab/boss/newboss-modules/boss-system&#x27;</span>]]])</span><br><span class="line">            checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/master&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;boss-common&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&quot;<span class="variable">$credentialsId</span>&quot;</span>, url: <span class="string">&#x27;$&#123;gitUrl&#125;/gitlab/boss/newboss/boss-common&#x27;</span>]]])</span><br><span class="line">            checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/master&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;boss-auth&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&quot;<span class="variable">$credentialsId</span>&quot;</span>, url: <span class="string">&#x27;$&#123;gitUrl&#125;/gitlab/boss/newboss/boss-auth&#x27;</span>]]])</span><br><span class="line">            checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/master&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;boss-gateway&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&quot;<span class="variable">$credentialsId</span>&quot;</span>, url: <span class="string">&#x27;$&#123;gitUrl&#125;/gitlab/boss/newboss/boss-gateway&#x27;</span>]]])</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>( <span class="string">&quot;<span class="variable">$install</span>&quot;</span> == <span class="string">&#x27;true&#x27;</span> ) &#123;</span><br><span class="line">            dir(<span class="string">&#x27;boss&#x27;</span>) &#123;</span><br><span class="line">                sh <span class="string">&quot;<span class="variable">$installSh</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>( <span class="string">&quot;<span class="variable">$installSystem</span>&quot;</span> == <span class="string">&#x27;true&#x27;</span> ) &#123;</span><br><span class="line">                dir(<span class="string">&#x27;boss-system&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&quot;<span class="variable">$installSh</span>&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;publish&#x27;</span>) &#123;</span><br><span class="line">      parallel &#123;</span><br><span class="line">        stage(<span class="string">&#x27;boss-gateway&#x27;</span>) &#123;</span><br><span class="line">          steps &#123;</span><br><span class="line">            script&#123;</span><br><span class="line">              <span class="keyword">if</span> ( <span class="string">&quot;<span class="variable">$gateway</span>&quot;</span> == <span class="string">&#x27;true&#x27;</span> ) &#123;</span><br><span class="line">                dir(<span class="string">&#x27;boss-gateway/src/main/docker&#x27;</span>) &#123;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker stop boss-gateway&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The container doesn&#x27;t running&quot;</span>&#125;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker rm boss-gateway&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The container doesn&#x27;t exist&quot;</span>&#125;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker rmi boss-gateway:<span class="variable">$&#123;bossVersion&#125;</span>&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The image doesn&#x27;t exist&quot;</span>&#125;</span><br><span class="line">                  </span><br><span class="line">                  sh <span class="string">&quot;docker build -t boss-gateway:<span class="variable">$&#123;bossVersion&#125;</span> . &amp;&amp; docker run -d &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;-v /home/boss/logs/boss-gateway:/home/boss/logs/boss-gateway &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--name boss-gateway &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--restart always &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--network host &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;boss-gateway:<span class="variable">$&#123;bossVersion&#125;</span>&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;boss-auth&#x27;</span>) &#123;</span><br><span class="line">          steps &#123;</span><br><span class="line">            script&#123;</span><br><span class="line">              <span class="keyword">if</span> ( <span class="string">&quot;<span class="variable">$auth</span>&quot;</span> == <span class="string">&#x27;true&#x27;</span> ) &#123;</span><br><span class="line">                dir(<span class="string">&#x27;boss-auth/src/main/docker&#x27;</span>) &#123;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker stop boss-auth&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The container doesn&#x27;t running&quot;</span>&#125;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker rm boss-auth&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The container doesn&#x27;t exist&quot;</span>&#125;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker rmi boss-auth:<span class="variable">$&#123;bossVersion&#125;</span>&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The image doesn&#x27;t exist&quot;</span>&#125;</span><br><span class="line">                  </span><br><span class="line">                  sh <span class="string">&quot;docker build -t boss-auth:<span class="variable">$&#123;bossVersion&#125;</span> . &amp;&amp; docker run -d &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;-v /home/boss/logs/boss-auth:/home/boss/logs/boss-auth &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--name boss-auth &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--restart always &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--network host &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;boss-auth:<span class="variable">$&#123;bossVersion&#125;</span>&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;boss-system&#x27;</span>) &#123;</span><br><span class="line">          steps &#123;</span><br><span class="line">            script&#123;</span><br><span class="line">              <span class="keyword">if</span> ( <span class="string">&quot;<span class="variable">$system</span>&quot;</span> == <span class="string">&#x27;true&#x27;</span> ) &#123;</span><br><span class="line">                dir(<span class="string">&#x27;boss-system/src/main/docker&#x27;</span>) &#123;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker stop boss-system&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The container doesn&#x27;t running&quot;</span>&#125;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker rm boss-system&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The container doesn&#x27;t exist&quot;</span>&#125;</span><br><span class="line">                  try &#123;sh <span class="string">&quot;docker rmi boss-system:<span class="variable">$&#123;bossVersion&#125;</span>&quot;</span>&#125;catch (exc) &#123;<span class="built_in">echo</span> <span class="string">&quot;The image doesn&#x27;t exist&quot;</span>&#125;</span><br><span class="line">                  </span><br><span class="line">                  sh <span class="string">&quot;docker build -t boss-system:<span class="variable">$&#123;bossVersion&#125;</span> . &amp;&amp; docker run -d &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;-v /home/boss/logs/boss-system:/home/boss/logs/boss-system &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;-v /home/boss/avatar:/home/boss/avatar &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;-v /home/boss/file/user:/home/boss/file/user &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--name boss-system &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--restart always &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;--network host &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;boss-system:<span class="variable">$&#123;bossVersion&#125;</span>&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream</title>
      <link href="/blog/2022/04/28/Java/Stream/"/>
      <url>/blog/2022/04/28/Java/Stream/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一、 Stream 的操作步骤</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 创建 Stream</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. 中间操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3. 终止操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStreamAPI1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">59</span>, <span class="number">6666.66</span>),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">9999.99</span>),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">28</span>, <span class="number">3333.33</span>),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">&quot;田七&quot;</span>, <span class="number">38</span>, <span class="number">5555.55</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 中间操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">映射</span></span><br><span class="line"><span class="comment">map——接收 Lambda ， 将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line"><span class="comment">flatMap——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Stream&lt;String&gt; str = emps.stream()</span><br><span class="line">.map((e) -&gt; e.getName());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; strList = Arrays.asList(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;eee&quot;</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; stream = strList.stream()</span><br><span class="line">   .map(String::toUpperCase);</span><br><span class="line"></span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Stream&lt;Stream&lt;Character&gt;&gt; stream2 = strList.stream()</span><br><span class="line">   .map(TestStreamAPI1::filterCharacter);</span><br><span class="line"></span><br><span class="line">stream2.forEach((sm) -&gt; &#123;</span><br><span class="line">sm.forEach(System.out::println);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Character&gt; stream3 = strList.stream()</span><br><span class="line">   .flatMap(TestStreamAPI1::filterCharacter);</span><br><span class="line"></span><br><span class="line">stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">filterCharacter</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Character ch : str.toCharArray()) &#123;</span><br><span class="line">list.add(ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sorted()——自然排序</span></span><br><span class="line"><span class="comment">sorted(Comparator com)——定制排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.sorted()</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">emps.stream()</span><br><span class="line">.sorted((x, y) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(x.getAge() == y.getAge())&#123;</span><br><span class="line"><span class="keyword">return</span> x.getName().compareTo(y.getName());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(x.getAge(), y.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一、 Stream 的操作步骤</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 创建 Stream</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. 中间操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3. 终止操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStreamAPI2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">59</span>, <span class="number">6666.66</span>, Status.BUSY),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">9999.99</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">28</span>, <span class="number">3333.33</span>, Status.VOCATION),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.BUSY),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">&quot;田七&quot;</span>, <span class="number">38</span>, <span class="number">5555.55</span>, Status.BUSY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 终止操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">allMatch——检查是否匹配所有元素</span></span><br><span class="line"><span class="comment">anyMatch——检查是否至少匹配一个元素</span></span><br><span class="line"><span class="comment">noneMatch——检查是否没有匹配的元素</span></span><br><span class="line"><span class="comment">findFirst——返回第一个元素</span></span><br><span class="line"><span class="comment">findAny——返回当前流中的任意元素</span></span><br><span class="line"><span class="comment">count——返回流中元素的总个数</span></span><br><span class="line"><span class="comment">max——返回流中最大值</span></span><br><span class="line"><span class="comment">min——返回流中最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> bl = emps.stream()</span><br><span class="line">.allMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line"></span><br><span class="line">System.out.println(bl);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> bl1 = emps.stream()</span><br><span class="line">.anyMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line"></span><br><span class="line">System.out.println(bl1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> bl2 = emps.stream()</span><br><span class="line">.noneMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line"></span><br><span class="line">System.out.println(bl2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Employee&gt; op = emps.stream()</span><br><span class="line">.sorted((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()))</span><br><span class="line">.findFirst();</span><br><span class="line"></span><br><span class="line">System.out.println(op.get());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;Employee&gt; op2 = emps.parallelStream()</span><br><span class="line">.filter((e) -&gt; e.getStatus().equals(Status.FREE))</span><br><span class="line">.findAny();</span><br><span class="line"></span><br><span class="line">System.out.println(op2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> count = emps.stream()</span><br><span class="line"> .filter((e) -&gt; e.getStatus().equals(Status.FREE))</span><br><span class="line"> .count();</span><br><span class="line"></span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">Optional&lt;Double&gt; op = emps.stream()</span><br><span class="line">.map(Employee::getSalary)</span><br><span class="line">.max(Double::compare);</span><br><span class="line"></span><br><span class="line">System.out.println(op.get());</span><br><span class="line"></span><br><span class="line">Optional&lt;Employee&gt; op2 = emps.stream()</span><br><span class="line">.min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line"></span><br><span class="line">System.out.println(op2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：流进行了终止操作后，不能再次使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">Stream&lt;Employee&gt; stream = emps.stream()</span><br><span class="line"> .filter((e) -&gt; e.getStatus().equals(Status.FREE));</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> count = stream.count();</span><br><span class="line"></span><br><span class="line">stream.map(Employee::getSalary)</span><br><span class="line">.max(Double::compare);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStreamAPI3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">79</span>, <span class="number">6666.66</span>, Status.BUSY),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">9999.99</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">28</span>, <span class="number">3333.33</span>, Status.VOCATION),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.BUSY),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">&quot;田七&quot;</span>, <span class="number">38</span>, <span class="number">5555.55</span>, Status.BUSY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 终止操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">归约</span></span><br><span class="line"><span class="comment">reduce(T identity, BinaryOperator) / reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Integer sum = list.stream()</span><br><span class="line">.reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;Double&gt; op = emps.stream()</span><br><span class="line">.map(Employee::getSalary)</span><br><span class="line">.reduce(Double::sum);</span><br><span class="line"></span><br><span class="line">System.out.println(op.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：搜索名字中 “六” 出现的次数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; sum = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.flatMap(TestStreamAPI1::filterCharacter)</span><br><span class="line">.map((ch) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(ch.equals(<span class="string">&#x27;六&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;).reduce(Integer::sum);</span><br><span class="line"></span><br><span class="line">System.out.println(sum.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//collect——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;String&gt; list = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">set.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; hs = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">hs.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Double&gt; max = emps.stream()</span><br><span class="line">.map(Employee::getSalary)</span><br><span class="line">.collect(Collectors.maxBy(Double::compare));</span><br><span class="line"></span><br><span class="line">System.out.println(max.get());</span><br><span class="line"></span><br><span class="line">Optional&lt;Employee&gt; op = emps.stream()</span><br><span class="line">.collect(Collectors.minBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"></span><br><span class="line">System.out.println(op.get());</span><br><span class="line"></span><br><span class="line">Double sum = emps.stream()</span><br><span class="line">.collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">Double avg = emps.stream()</span><br><span class="line">.collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line"></span><br><span class="line">System.out.println(avg);</span><br><span class="line"></span><br><span class="line">Long count = emps.stream()</span><br><span class="line">.collect(Collectors.counting());</span><br><span class="line"></span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">DoubleSummaryStatistics dss = emps.stream()</span><br><span class="line">.collect(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class="line"></span><br><span class="line">System.out.println(dss.getMax());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map&lt;Status, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">.collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多级分组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map&lt;Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = emps.stream()</span><br><span class="line">.collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(e.getAge() &gt;= <span class="number">60</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;老年&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getAge() &gt;= <span class="number">35</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;中年&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;成年&quot;</span>;</span><br><span class="line">&#125;)));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分区</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map&lt;Boolean, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">.collect(Collectors.partitioningBy((e) -&gt; e.getSalary() &gt;= <span class="number">5000</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.collect(Collectors.joining(<span class="string">&quot;,&quot;</span> , <span class="string">&quot;----&quot;</span>, <span class="string">&quot;----&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Double&gt; sum = emps.stream()</span><br><span class="line">.map(Employee::getSalary)</span><br><span class="line">.collect(Collectors.reducing(Double::sum));</span><br><span class="line"></span><br><span class="line">System.out.println(sum.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity基本流程</title>
      <link href="/blog/2022/04/28/Java/SpringSecurity/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
      <url>/blog/2022/04/28/Java/SpringSecurity/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><p><img src="/blog/img/md/Java/01.png"><br><img src="/blog/img/md/Java/06.png"></p><h2 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h2><blockquote><p>过滤链的最后一条</p></blockquote><p><img src="/blog/img/md/Java/02.png"></p><h2 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h2><blockquote><p>异常捕获，登录失败则跳转到这里</p></blockquote><p><img src="/blog/img/md/Java/03.png"></p><h2 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h2><blockquote><p>身份认证</p></blockquote><p><img src="/blog/img/md/Java/04.png"></p><h2 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h2><blockquote><p>接口 实现这个接口 通过userId获取密码权限等信息</p></blockquote><p><img src="/blog/img/md/Java/05.png"></p><h2 id="PasswordEncoder"><a href="#PasswordEncoder" class="headerlink" title="PasswordEncoder"></a>PasswordEncoder</h2><blockquote><p>接口 配置后可修改密码匹配规则和密码加密</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda</title>
      <link href="/blog/2022/04/28/Java/Lambda/"/>
      <url>/blog/2022/04/28/Java/Lambda/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*java8内置的四大核心函数式接口</span></span><br><span class="line"><span class="comment">Consumer&lt;T&gt; :消费型接口</span></span><br><span class="line"><span class="comment">    void accept(T t);</span></span><br><span class="line"><span class="comment">Supplier&lt;T&gt; :供给型接口</span></span><br><span class="line"><span class="comment">    T get();</span></span><br><span class="line"><span class="comment">Function&lt;T,R&gt;:函数型接口</span></span><br><span class="line"><span class="comment">    R apply(T t);</span></span><br><span class="line"><span class="comment">Predicate&lt;T&gt;:断言型接口</span></span><br><span class="line"><span class="comment">    boolean test(T t);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Predicate&lt;T&gt;:断言型接口</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = filterStr(Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;atguigu&quot;</span>, <span class="string">&quot;lambda&quot;</span>, <span class="string">&quot;www&quot;</span>),</span><br><span class="line">            (str) -&gt; str.length() &gt; <span class="number">3</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将满足条件的字符串加入到集合中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">filterStr</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pre.test(s))&#123;</span><br><span class="line">            strList.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function&lt;T,R&gt;:函数型接口</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s = strHandler(<span class="string">&quot;abcdefg&quot;</span>, (str) -&gt; str.trim().substring(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">strHandler</span><span class="params">(String str, Function&lt;String,String&gt; fun)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String apply = fun.apply(str);</span><br><span class="line">    <span class="keyword">return</span> apply;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Supplier&lt;T&gt; :供给型接口</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numList = getNumList(<span class="number">10</span>, () -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>));</span><br><span class="line">    numList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生指定个整数放入集合中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNumList</span><span class="params">(<span class="keyword">int</span> num, Supplier&lt;Integer&gt; sup)</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        Integer integer = sup.get();</span><br><span class="line">        list.add(integer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Consumer&lt;T&gt; :消费型接口</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">  happy(<span class="number">10000</span>,(x) -&gt; System.out.println(<span class="string">&quot;消费了&quot;</span> + x + <span class="string">&quot;元&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happy</span><span class="params">(<span class="keyword">double</span> money, Consumer&lt;Double&gt; con)</span></span>&#123;</span><br><span class="line">    con.accept(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2.0源码分析</title>
      <link href="/blog/2022/04/28/Java/OAuth2.0/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/blog/2022/04/28/Java/OAuth2.0/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="获取code"><a href="#获取code" class="headerlink" title="获取code"></a>获取code</h2><blockquote><p><a href="http://localhost:8080/oauth/authorize?client_id=client&amp;response_type=code">http://localhost:8080/oauth/authorize?client_id=client&amp;response_type=code</a></p></blockquote><ol><li><p>访问AuthorizationEndPoint中的/oauth/authorize<br/><br>里面会判断client信息和用户信息，如果user没有Authentication，则会报错，跳转到ExceptionTranslationFilter类中，请求转发到/login路径，并将现请求路径存储到session的saverequest中。</p><blockquote><p>AuthorizationEndPoint（authorize）-&gt;ExceptionTranslationFilter（handleSpringSecurityException-&gt;sendStartAuthentication-&gt; 请求重定向到/login authenticationEntryPoint.commence）<br>requestCache的常用的实现类是HttpSessionRequestCache</p></blockquote></li><li><p>post请求/login路径<br/><br>按照FilterChainProxy的filter链运行到UsernamePasswordAuthenticationFilter，验证通过后执行successHandler.onAuthenticationSuccess(request, response, authResult)，获取session中的savedrequest，重定向到原先的地址/oauth/authorize，并附带完整请求参数。</p><blockquote><p>SavedRequestAwareAuthenticationSuccessHandler </p></blockquote></li><li><p>第二次请求/oauth/authorize<br/><br>请求中携带了Authentication的session，系统验证通过，生成授权码，存储在InMemoryAuthorizationCodeServices中的concurrenthashmap中，且返回给请求参数中的redirect_uri</p></li></ol><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><blockquote><p><a href="http://client:secret@localhost:8080/oauth/token?grant_type=authorization_code&amp;code=%E8%8E%B7%E5%8F%96%E7%9A%84code">http://client:secret@localhost:8080/oauth/token?grant_type=authorization_code&amp;code=获取的code</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OAuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK命令</title>
      <link href="/blog/2022/04/28/Java/Jdk%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2022/04/28/Java/Jdk%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="jps-查看本机java进程信息"><a href="#jps-查看本机java进程信息" class="headerlink" title="jps 查看本机java进程信息"></a>jps 查看本机java进程信息</h1><blockquote><p>显示当前所有java进程pid的命令，我们可以通过这个命令来查看到底启动了几个java进程（因为每一个java程序都会独占一个java虚拟机实例），不过jps有个缺点是只能显示当前用户的进程id，要显示其他用户的还只能用linux的ps命令。</p></blockquote><h2 id="jps-l"><a href="#jps-l" class="headerlink" title="jps -l"></a>jps -l</h2><blockquote><p>输出应用程序main.class的完整package名或者应用程序jar文件完整路径名</p></blockquote><h2 id="jps-v"><a href="#jps-v" class="headerlink" title="jps -v"></a>jps -v</h2><blockquote><p>输出传递给JVM的参数</p></blockquote><h2 id="jps失效"><a href="#jps失效" class="headerlink" title="jps失效"></a>jps失效</h2><blockquote><p>我们在定位问题过程会遇到这样一种情况，用jps查看不到进程id，用ps -ef | grep java却能看到启动的java进程。<br>要解释这种现象，先来了解下jps的实现机制：<br>java程序启动后，会在目录/tmp/hsperfdata_{userName}/下生成几个文件，文件名就是java进程的pid，因此jps列出进程id就是把这个目录下的文件名列一下而已，至于系统参数，则是读取文件中的内容。<br>我们来思考下：如果由于磁盘满了，无法创建这些文件，或者用户对这些文件没有读的权限。又或者因为某种原因这些文件或者目录被清除，出现以上这些情况，就会导致jps命令失效。<br>如果jps命令失效，而我们又要获取pid，还可以使用以下两种方法：</p><ol><li>top | grep java</li><li>ps -ef | grep java</li></ol></blockquote><h1 id="jstack-打印线程的栈信息，制作线程dump文件"><a href="#jstack-打印线程的栈信息，制作线程dump文件" class="headerlink" title="jstack 打印线程的栈信息，制作线程dump文件"></a>jstack 打印线程的栈信息，制作线程dump文件</h1><blockquote><p>主要用于生成指定进程当前时刻的线程快照，线程快照是当前java虚拟机每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是用于定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致长时间等待。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack [pid]</span><br></pre></td></tr></table></figure><h1 id="jmap-打印内存映射，制作堆dump文件"><a href="#jmap-打印内存映射，制作堆dump文件" class="headerlink" title="jmap 打印内存映射，制作堆dump文件"></a>jmap 打印内存映射，制作堆dump文件</h1><blockquote><p>主要用于打印指定java进程的共享对象内存映射或堆内存细节。<br>堆Dump是反映堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。一般在内存不足，GC异常等情况下，我们会去怀疑内存泄漏，这个时候就会去打印堆Dump。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印的信息分别为：共享对象的起始地址、映射大小、共享对象路径的全程。</span></span><br><span class="line">jmap [pid]</span><br></pre></td></tr></table></figure><h2 id="jmap-heap-pid-查看堆使用情况"><a href="#jmap-heap-pid-查看堆使用情况" class="headerlink" title="jmap -heap [pid] 查看堆使用情况"></a>jmap -heap [pid] 查看堆使用情况</h2><p><img src="/blog/img/md/Java/07.png" alt="图1"></p><h2 id="jmap-histo-pid-查看堆中对象数量和大小"><a href="#jmap-histo-pid-查看堆中对象数量和大小" class="headerlink" title="jmap -histo [pid] 查看堆中对象数量和大小"></a>jmap -histo [pid] 查看堆中对象数量和大小</h2><blockquote><p>打印的信息分别是：序列号、Class实例的数量、内存的占用、类限定名<br>如果是内部类，类名的开头会加上*，如果加上live子参数的话，如jmap -histo：live pid，这个命名会触发一次FUll GC，只统计存活对象</p></blockquote><h2 id="jmap-dump-format-b-file-heapdump-pid-将内存使用的详细情况输出到文件"><a href="#jmap-dump-format-b-file-heapdump-pid-将内存使用的详细情况输出到文件" class="headerlink" title="jmap -dump:format=b,file=heapdump [pid] 将内存使用的详细情况输出到文件"></a>jmap -dump:format=b,file=heapdump [pid] 将内存使用的详细情况输出到文件</h2><blockquote><p>然后使用jhat命令查看该文件：jhat -port 4000 文件名 ，在浏览器中访问http:localhost:4000/<br>总结：<br>该命令适用的场景是程序内存不足或者GC频繁，这时候很可能是内存泄漏。通过以上命令查看堆使用情况、大量对象被持续引用等情况。</p></blockquote><h1 id="jstat-性能监控工具"><a href="#jstat-性能监控工具" class="headerlink" title="jstat 性能监控工具"></a>jstat 性能监控工具</h1><blockquote><p>主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控。</p><ol><li>jstat <code>-&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</code></li><li>option：我们经常使用的选项有gc、gcutil</li><li>vmid：java进程id</li><li>interval：间隔时间，单位为毫秒</li><li>count：打印次数</li></ol></blockquote><h2 id="jstat-gc-pid-5000-20"><a href="#jstat-gc-pid-5000-20" class="headerlink" title="jstat -gc [pid] 5000 20"></a>jstat -gc [pid] 5000 20</h2><blockquote><p>S0C:年轻代第一个survivor的容量（字节）<br>S1C：年轻代第二个survivor的容量（字节）<br>S0U：年轻代第一个survivor已使用的容量（字节）<br>S1U：年轻代第二个survivor已使用的容量（字节）<br>EC：年轻代中Eden的空间（字节）<br>EU：年代代中Eden已使用的空间（字节）<br>OC：老年代的容量（字节）<br>OU:老年代中已使用的空间（字节）<br>PC：永久代的容量<br>PU：永久代已使用的容量<br>YGC：从应用程序启动到采样时年轻代中GC的次数<br>YGCT:从应用程序启动到采样时年轻代中GC所使用的时间（单位：S）<br>FGC：从应用程序启动到采样时老年代中GC（FULL GC）的次数<br>FGCT：从应用程序启动到采样时老年代中GC所使用的时间（单位：S）</p></blockquote><h2 id="jstat-gcutil-pid-5000-20"><a href="#jstat-gcutil-pid-5000-20" class="headerlink" title="jstat -gcutil [pid] 5000 20"></a>jstat -gcutil [pid] 5000 20</h2><blockquote><p>s0:年轻代中第一个survivor已使用的占当前容量百分比<br>s1:年轻代中第二个survivor已使用的占当前容量百分比<br>E:年轻代中Eden已使用的占当前容量百分比<br>O:老年代中已使用的占当前容量百分比<br>P:永久代中已使用的占当前容量百分比</p></blockquote><h1 id="jhat-内存分析工具"><a href="#jhat-内存分析工具" class="headerlink" title="jhat 内存分析工具"></a>jhat 内存分析工具</h1><blockquote><p>主要用来解析java堆dump并启动一个web服务器，然后就可以在浏览器中查看堆的dump文件了。<br>生成dump文件的方法前面已经介绍了，这边主要介绍如何解析java堆转储文件，并启动一个web server</p></blockquote><h2 id="jhat-heapdump"><a href="#jhat-heapdump" class="headerlink" title="jhat heapdump"></a>jhat heapdump</h2><blockquote><p>这个命令将heapdump文件转换成html格式，并且启动一个http服务，默认端口为7000。<br>如果端口冲突，可以使用以下命令指定端口：jhat -port 4000 heapdump</p></blockquote><h1 id="jinfo-查看正在运行的java运用程序的扩展参数"><a href="#jinfo-查看正在运行的java运用程序的扩展参数" class="headerlink" title="jinfo 查看正在运行的java运用程序的扩展参数"></a>jinfo 查看正在运行的java运用程序的扩展参数</h1><blockquote><p>jinfo可以用来查看正在运行的java运用程序的扩展参数，甚至支持在运行时动态地更改部分参数。<br>基本使用语法如下： jinfo -&lt; option &gt; &lt; pid &gt; ，其中option可以为以下信息：<br>-flag&lt; name &gt;: 打印指定java虚拟机的参数值<br>-flag [+|-]&lt; name &gt;：设置或取消指定java虚拟机参数的布尔值<br>-flag &lt; name &gt;=&lt; value &gt;：设置指定java虚拟机的参数的值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面的命令显示了新生代对象晋升到老年代对象的最大年龄。在运行程序运行时并没有指定这个参数，但是通过jinfo，可以查看这个参数的当前的值。</span></span><br><span class="line">jinfo -flag MaxTenuringThreshold 2500</span><br><span class="line"><span class="comment">#下面的命令显示是否打印gc详细信息：</span></span><br><span class="line">jinfo -flag PrintGCDetails 2500</span><br><span class="line"><span class="comment">#下面的命令在运用程序运行时动态打开打印详细gc信息开关：</span></span><br><span class="line">jinfo -flag +PrintGCDetails 2500</span><br><span class="line">jinfo -flag PrintGCDetails 2500</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：jinfo虽然可以在java程序运行时动态地修改虚拟机参数，但并不是所有的参数都支持动态修改。</p></blockquote><h1 id="jcmd-可以用来导出堆，查看java进程，导出线程信息，执行GC等"><a href="#jcmd-可以用来导出堆，查看java进程，导出线程信息，执行GC等" class="headerlink" title="jcmd 可以用来导出堆，查看java进程，导出线程信息，执行GC等"></a>jcmd 可以用来导出堆，查看java进程，导出线程信息，执行GC等</h1><blockquote><p>在JDK 1.7之后，新增了一个命令行工具jcmd。它是一个多功能工具，可以用来导出堆，查看java进程，导出线程信息，执行GC等。jcmd拥有jmap的大部分功能，Oracle官方建议使用jcmd代替jmap。</p></blockquote><h2 id="jcmd-l-命令列出当前运行的所有虚拟机"><a href="#jcmd-l-命令列出当前运行的所有虚拟机" class="headerlink" title="jcmd -l 命令列出当前运行的所有虚拟机"></a>jcmd -l 命令列出当前运行的所有虚拟机</h2><h2 id="jcmd-pid-help-针对每一个虚拟机，可以使用help命令列出该虚拟机支持的所有命令"><a href="#jcmd-pid-help-针对每一个虚拟机，可以使用help命令列出该虚拟机支持的所有命令" class="headerlink" title="jcmd [pid] help 针对每一个虚拟机，可以使用help命令列出该虚拟机支持的所有命令"></a>jcmd [pid] help 针对每一个虚拟机，可以使用help命令列出该虚拟机支持的所有命令</h2><blockquote><p>VM.native_memory<br>VM.commercial_features<br>GC.rotate_log<br>ManagementAgent.stop<br>ManagementAgent.start_local<br>ManagementAgent.start<br>Thread.print，                         打印线程栈信息<br>GC.class_histogram，              查看系统中类统计信息<br>GC.heap_dump，                    导出堆信息，与jmap -dump功能一样<br>GC.run_finalization，               触发finalize()<br>GC.run，                                触发gc()<br>VM.uptime，                           VM启动时间<br>VM.flags，                              获取JVM启动参数<br>VM.system_properties，          获取系统Properties<br>VM.command_line，                 启动时命令行指定的参数<br>VM.version<br>help</p></blockquote><h1 id="jconsole-简易的可视化控制台"><a href="#jconsole-简易的可视化控制台" class="headerlink" title="jconsole 简易的可视化控制台"></a>jconsole 简易的可视化控制台</h1><h1 id="jvisualvm-功能强大的控制台"><a href="#jvisualvm-功能强大的控制台" class="headerlink" title="jvisualvm 功能强大的控制台"></a>jvisualvm 功能强大的控制台</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js函数用法</title>
      <link href="/blog/2022/04/28/JS/js%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
      <url>/blog/2022/04/28/JS/js%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h1><ol><li>window.location.href 返回当前页面的 href (URL)</li><li>window.location.hostname 返回 web 主机的域名</li><li>window.location.pathname 返回当前页面的路径或文件名</li><li>window.location.protocol 返回使用的 web 协议（http: 或 https:）</li><li>window.location.assign 加载新文档</li><li>window.location.host 获取URL的主机部分</li><li>window.location.port 获取URL关联的端口</li><li>window.location.search获取URL跟在?后面的部分</li><li>window.location.hash获取href属性中在#后面的部分</li></ol><h1 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h1><blockquote><p>var str = “98dsfhasdf/ sadkfj/sdfa”;<br>alert(str.replace(///g, ‘’));<br>正则替换 所有的 ‘/‘ 字符<br>正则基本规则 /匹配内容/ 前后各有两个’/‘<br>因为 ‘/‘ 符号 和上面的规则冲突了<br>所以需要用 ‘&#39; 转义<br>例如要删除 ‘&#39; 则写 /\/<br>后面的g代表删除所有匹配项，如果没有的话，就只删除第一个匹配项</p></blockquote><h1 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h1><blockquote><p>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找、如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">MyClass.prototype.a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">var</span> mc2 = <span class="keyword">new</span> MyClass();</span><br><span class="line">mc.a = <span class="string">&quot;我是mc中的a&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(mc.a);</span><br><span class="line"><span class="built_in">console</span>.log(mc2.a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> mc);</span><br><span class="line"><span class="comment">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</span></span><br></pre></td></tr></table></figure><h1 id="字节转兆字节"><a href="#字节转兆字节" class="headerlink" title="字节转兆字节"></a>字节转兆字节</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bytesToSize = <span class="function"><span class="keyword">function</span>(<span class="params">bytes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bytes === <span class="number">0</span> || bytes == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&#x27;0 B&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="number">1024</span>,</span><br><span class="line">  sizes = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;KB&#x27;</span>, <span class="string">&#x27;MB&#x27;</span>, <span class="string">&#x27;GB&#x27;</span>, <span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PB&#x27;</span>, <span class="string">&#x27;EB&#x27;</span>, <span class="string">&#x27;ZB&#x27;</span>, <span class="string">&#x27;YB&#x27;</span>],</span><br><span class="line">  i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.log(bytes) / <span class="built_in">Math</span>.log(k));</span><br><span class="line">  <span class="keyword">return</span> (bytes / <span class="built_in">Math</span>.pow(k, i)). toFixed(<span class="number">2</span>) + <span class="string">&#x27; &#x27;</span> + sizes[i];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM参数</title>
      <link href="/blog/2022/04/28/JVM/JVM%E5%8F%82%E6%95%B0/"/>
      <url>/blog/2022/04/28/JVM/JVM%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>-Xms20m 指定堆空间最小内存为20m<br>-Xmx20m 指定堆空间最大内存为20m<br>-Xmn10m 指定新生代的大小为10m<br>-XX:PermSize 配置初始永久区的大小<br>-XX:MaxPermSize 配置最大永久区的大小<br>-XX:+HeapDumpOnOutOfMemoryError    内存溢出时，导出整个堆的信息，和下一个参数配合使用<br>-XX:+PrintGCDetails gc发生时，打印更详细的日志<br>-XX:SurvivorRatio=8 决定新生代中Eden区与一个Survivor区的空间比例是8:1<br>-XX:PretenureSizeThreshold 大于这个设置值的对象直接在老年代分配(目的:避免在Eden区及两个Survivor区之间发生大量的内存复制)(只在Serial和ParNew两款收集器有效)<br>-XX:+UseSerialGC 使用Serial收集器<br>-XX:MaxTenuringThreshold=1 对象晋升老年代的年龄阙值<br>-XX:+PrintTenuringDistribution 打印对象年龄</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLSQL安装</title>
      <link href="/blog/2022/04/28/Install/PLSQL/"/>
      <url>/blog/2022/04/28/Install/PLSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量："><a href="#环境变量：" class="headerlink" title="环境变量："></a>环境变量：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NLS_LANG：SIMPLIFIED CHINESE_CHINA.ZHS16GBK</span><br><span class="line">ORACLE_HOME：D:\Java\oracle\instantclient_12_2</span><br><span class="line">TNS_ADMIN：D:\Java\oracle\instantclient_12_2\NETWORK\ADMIN</span><br><span class="line">PATH:  D:\Java\oracle\instantclient_12_2</span><br></pre></td></tr></table></figure><p>文件：</p><blockquote><p>D:\Java\oracle\instantclient_12_2\NETWORK\ADMIN\tnsnames.ora</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NEWBOSS =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 10.8.73.16)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = NBUNIDB)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决docker下载缓慢问题</title>
      <link href="/blog/2022/04/28/Docker/%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F/"/>
      <url>/blog/2022/04/28/Docker/%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>通过 dig @114.114.114.114 registry-1.docker.io 找到可用IP地址<br>修改/etc/hosts强制docker.io相关的域名解析到其它可用IP</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找不到或无法加载主类</title>
      <link href="/blog/2022/04/28/IDEA/%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/"/>
      <url>/blog/2022/04/28/IDEA/%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-ERROR：找不到或无法加载主类"><a href="#IDEA-ERROR：找不到或无法加载主类" class="headerlink" title="IDEA ERROR：找不到或无法加载主类"></a>IDEA ERROR：找不到或无法加载主类</h1><p><img src="/blog/img/md/IDEA-01.png" alt="图1"></p><blockquote><p>将设置的source folder删除</p></blockquote><p><img src="/blog/img/md/IDEA-02.png" alt="图2"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/blog/2022/04/28/Docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2022/04/28/Docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="服务器传输"><a href="#服务器传输" class="headerlink" title="服务器传输"></a>服务器传输</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp file root@192.168.1.1:/root</span><br><span class="line"><span class="comment">#传输目录</span></span><br><span class="line">scp -r dir root@192.168.1.1:/root</span><br></pre></td></tr></table></figure><h1 id="添加node的标签"><a href="#添加node的标签" class="headerlink" title="添加node的标签"></a>添加node的标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --label-add role=mic node01</span><br></pre></td></tr></table></figure><h1 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --label-rm role izbp17i0ndca7tu88rknmvz</span><br></pre></td></tr></table></figure><h1 id="配置镜像地址"><a href="#配置镜像地址" class="headerlink" title="配置镜像地址"></a>配置镜像地址</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json </span><br></pre></td></tr></table></figure><h1 id="清理悬空镜像"><a href="#清理悬空镜像" class="headerlink" title="清理悬空镜像"></a>清理悬空镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -f <span class="string">&quot;dangling=true&quot;</span> -q)</span><br></pre></td></tr></table></figure><h1 id="删除已停止的镜像"><a href="#删除已停止的镜像" class="headerlink" title="删除已停止的镜像"></a>删除已停止的镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a | grep Exited | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure><h1 id="创建容器并启动"><a href="#创建容器并启动" class="headerlink" title="创建容器并启动"></a>创建容器并启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name myjdk01 d5d4d6126200</span><br></pre></td></tr></table></figure><h1 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m <span class="string">&quot;add fontconfig&quot;</span> 0b2616b0e5a8 ouruser/sinatra:v2</span><br></pre></td></tr></table></figure><h1 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale service=4</span><br></pre></td></tr></table></figure><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br><span class="line"></span><br><span class="line">sudo yum remove docker-ce.x86_64 containerd.io.x86_64 docker-ce-cli.x86_64 docker-ce-rootless-extras.x86_64 docker-scan-plugin.x86_64</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce-19.03.9 docker-ce-cli-19.03.9 containerd.io</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器进入的方式</title>
      <link href="/blog/2022/04/28/Docker/%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2022/04/28/Docker/%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="使用docker-attach进入Docker容器"><a href="#使用docker-attach进入Docker容器" class="headerlink" title="使用docker attach进入Docker容器"></a>使用docker attach进入Docker容器</h1><blockquote><p>创建一个守护态的Docker容器，使用docker attach命令进入容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd ubuntu:14.04 /bin/bash</span><br><span class="line">docker attach 44fc0f0582d9</span><br></pre></td></tr></table></figure><blockquote><p>使用该命令有一个问题。当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。<br>因为这个原因，所以docker attach命令不太适合于生产环境，平时自己开发应用时可以使用该命令</p></blockquote><h1 id="使用docker-exec进入Docker容器"><a href="#使用docker-exec进入Docker容器" class="headerlink" title="使用docker exec进入Docker容器"></a>使用docker exec进入Docker容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps  </span><br><span class="line">docker <span class="built_in">exec</span> -it 775c7c9ee1e1 /bin/bash </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker swarm</title>
      <link href="/blog/2022/04/28/Docker/Swarm/"/>
      <url>/blog/2022/04/28/Docker/Swarm/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-swarm"><a href="#docker-swarm" class="headerlink" title="docker swarm"></a>docker swarm</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.172.136</span><br></pre></td></tr></table></figure><h2 id="新的主机被当做manager（获取token）"><a href="#新的主机被当做manager（获取token）" class="headerlink" title="新的主机被当做manager（获取token）"></a>新的主机被当做manager（获取token）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure><h2 id="新的主机被当做worker（获取token）"><a href="#新的主机被当做worker（获取token）" class="headerlink" title="新的主机被当做worker（获取token）"></a>新的主机被当做worker（获取token）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token worker</span><br></pre></td></tr></table></figure><h2 id="升级为manager"><a href="#升级为manager" class="headerlink" title="升级为manager"></a>升级为manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node promote</span><br></pre></td></tr></table></figure><h2 id="降级为work"><a href="#降级为work" class="headerlink" title="降级为work"></a>降级为work</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node demote</span><br></pre></td></tr></table></figure><h2 id="创建自定义的overlay网络"><a href="#创建自定义的overlay网络" class="headerlink" title="创建自定义的overlay网络"></a>创建自定义的overlay网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver overlay my-overlay-network</span><br></pre></td></tr></table></figure><h2 id="管理器节点离开Docker-Swarm模式"><a href="#管理器节点离开Docker-Swarm模式" class="headerlink" title="管理器节点离开Docker Swarm模式"></a>管理器节点离开Docker Swarm模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave --force</span><br></pre></td></tr></table></figure><h2 id="普通节点离开Docker-Swarm模式"><a href="#普通节点离开Docker-Swarm模式" class="headerlink" title="普通节点离开Docker Swarm模式"></a>普通节点离开Docker Swarm模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决docker下载的mysql连不上的问题</title>
      <link href="/blog/2022/04/28/Docker/mysql%E8%BF%9E%E4%B8%8D%E4%B8%8A/"/>
      <url>/blog/2022/04/28/Docker/mysql%E8%BF%9E%E4%B8%8D%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="原因查找"><a href="#原因查找" class="headerlink" title="原因查找"></a>原因查找</h1><blockquote><p>通过查看网上别人遇到的相关问题，发现是由于navicat版本的问题，出现连接失败的原因：mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password。并提供了两种解决方案</p></blockquote><ol><li>升级navicat，由于navicat是收费的，个人感觉升级会比较麻烦点。</li><li>把用户密码登录的加密规则还原成mysql_native_password这种加密方式，本人选择第二种解决方案</li></ol><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop1 ~]<span class="comment"># docker exec -it mysql02 bash</span></span><br><span class="line">root@a4dd7e1182e7:/<span class="comment"># mysql -uroot -p123456</span></span><br></pre></td></tr></table></figure><ol><li>通过mysql -uroot -p进入mysql的命令行模式</li><li>输入命令修改相关机密方法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line"><span class="comment">#这里的password是你正在使用的密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment">#更新一下用户的密码这里的password为你修改的新密码。</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"> <span class="comment">#刷新权限，使自己的修改生效。</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这时还是连接不上，然后通过telnet3306数据库对应的接口，出现了8.0.11;S”3&lt;VN,.Y\k4Ycaching_sha2_password这个信息，是修改没有生效还是其他原因？重启容器之后还是不行。<br>然后use mysql;<br>这时发现了问题，原理刚刚修改的是localhost，对于非本机的连接密码校验规则还是没有变。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span> password expire never;</span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;why&#x27;</span>;<span class="comment">#why是自己新修改的密码。</span></span><br><span class="line">flush privileges;<span class="comment">#再次刷新一下权限配置。</span></span><br><span class="line"><span class="comment">#为了确定下，重新查一下</span></span><br><span class="line">select user,host,plugin from user <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改好了，再用宿主的window电脑访问数据库。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置证书连接Docker</title>
      <link href="/blog/2022/04/28/Docker/IDEA%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6%E8%BF%9E%E6%8E%A5Docker/"/>
      <url>/blog/2022/04/28/Docker/IDEA%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6%E8%BF%9E%E6%8E%A5Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="如果不需要证书，直接更改docker服务文件"><a href="#如果不需要证书，直接更改docker服务文件" class="headerlink" title="如果不需要证书，直接更改docker服务文件"></a>如果不需要证书，直接更改docker服务文件</h1><blockquote><p>服务文件名是docker.service，我发现不同安装方式路径会不一样，可以使用 find / -name docker.service 查找到指定文件，然后更改，直接在ExecStart=/usr/bin/dockerd下添加两句即可：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd \</span><br><span class="line">-H tcp://0.0.0.0:2375 \</span><br><span class="line">-H unix:///var/run/docker.sock \</span><br></pre></td></tr></table></figure><h1 id="下面是生成证书，并且配置到idea中的步骤"><a href="#下面是生成证书，并且配置到idea中的步骤" class="headerlink" title="下面是生成证书，并且配置到idea中的步骤"></a>下面是生成证书，并且配置到idea中的步骤</h1><ol><li>新建一个目录，在目录执行以下命令，输入两次密码，需要记住后面会用到<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br></pre></td></tr></table></figure></li><li>执行以下命令，输入密码，然后依次输入国家是 CN，省例如是Shanghai、市Shanghai、组织名称、组织单位、姓名或服务器名、邮件地址，都可以随意填写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br></pre></td></tr></table></figure></li><li>执行生成服务器端key证书文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server-key.pem 4096</span><br></pre></td></tr></table></figure></li><li>ip需要换成自己服务器的外网ip地址，或者域名都可以<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">&quot;/CN=10.8.73.31&quot;</span> -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure></li><li>配置白名单，多个用逗号隔开，例如： IP:192.168.1.111,IP:0.0.0.0，这里需要注意，虽然0.0.0.0可以匹配任意，但是仍然需要配置你的服务器外网ip，如果省略会造成错误，后面会讲到<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> subjectAltName = IP:10.8.73.31,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure></li><li>把 extendedKeyUsage = serverAuth 键值设置到extfile.cnf文件里，限制扩展只能用在服务器认证<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure></li><li>执行以下命令，输入之前设置的密码，然后会生成签名的证书<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure></li><li>生成例如idea等客户端需要用到的密钥文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out key.pem 4096</span><br></pre></td></tr></table></figure></li><li>生成客户端签名请求需要用到的临时文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br></pre></td></tr></table></figure></li><li>继续设置证书扩展属性<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure></li><li>输入之前的密码生成认证证书，生成正式签名证书<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure></li><li>删除生成的临时文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf client.csr server.csr</span><br></pre></td></tr></table></figure></li><li>修改证书为只读权限保证证书安全<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line">chmod -v 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure></li><li>复制服务端需要用到的证书到docker配置目录下便于识别使用：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp server-cert.pem ca.pem server-key.pem /etc/docker/</span><br></pre></td></tr></table></figure></li><li>修改docker配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/ca.pem --tlscert=/etc/docker/server-cert.pem --tlskey=/etc/docker/server-key.pem -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li>开放防火墙的2375的端口，如果防火墙已经关闭，忽略此项<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=2375/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li>重载服务并重启docker<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure></li><li>保存证书客户端文件到本地，我这里用的是sz命令，ftp也可以只要能放到本地客户端即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz ca.pem cert.pem key.pem</span><br></pre></td></tr></table></figure></li><li>测试一下证书是否配置成功，如果成功，会输出证书相关信息，如果有fail，请检查证书<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=10.8.73.31:2375 version</span><br></pre></td></tr></table></figure></li><li>IDEA配置docker<br><img src="/blog/img/md/Docker/01.jpg" alt="图1"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Registry</title>
      <link href="/blog/2022/04/28/Docker/Registry/"/>
      <url>/blog/2022/04/28/Docker/Registry/</url>
      
        <content type="html"><![CDATA[<h1 id="查看仓库"><a href="#查看仓库" class="headerlink" title="查看仓库"></a>查看仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:5000/v2/_catalog</span><br></pre></td></tr></table></figure><h1 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> registry rm -rf /var/lib/registry/docker/registry/v2/repositories/tomcat</span><br><span class="line">docker <span class="built_in">exec</span> registry bin/registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校验文件</title>
      <link href="/blog/2022/04/28/Bash/%E6%A0%A1%E9%AA%8C%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2022/04/28/Bash/%E6%A0%A1%E9%AA%8C%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><blockquote><p>certutil -hashfile [文件名] MD5</p></blockquote><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><blockquote><p>md5sum [文件名]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
